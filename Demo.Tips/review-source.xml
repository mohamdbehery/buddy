<?xml version="1.0" encoding="utf-8" ?>
<Sections>
	<Section Title="HR">
		<Item>
			<Title>Introduce yourself?</Title>
			<Data>Name, age, education, job history, current technical stack.</Data>
		</Item>
		<Item>
			<Title>What’s your salary expectations?</Title>
			<Data>
				Search about salary ranges in the job <b>country</b>.
			</Data>
		</Item>
		<Item>
			<Title>
				What do you know about our company?
			</Title>
			<Data>
				Company’s products and vision) > website.
			</Data>
		</Item>
		<Item>
			<Title>
				Please tell us about the situation, when you showed your leadership?
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Please tell about the situation, when you had a conflict and how you resolved it?
			</Title>
			<Data>
				Listen for everyone involved, friendly discussions and motivation.
			</Data>
		</Item>
		<Item>
			<Title>
				Why do you want to relocate joining our company?
			</Title>
			<Data>
				Talk about company environment advantages.
			</Data>
		</Item>
		<Item>
			<Title>
				What do you know about the country you applied for?
			</Title>
			<Data>
				Talk about country advantages.
			</Data>
		</Item>
		<Item>
			<Title>
				What is your preference of technologies (the ideal technology) you want to work with?
			</Title>
			<Data>
				Talk about current and preferred technical stack
			</Data>
		</Item>
		<Item>
			<Title>
				What are your strengths and weaknesses?
			</Title>
			<Data>
				Strength: never stop until I got my task finished.
				Weakness: sometimes I forget something I should do and I’m working on this issue by using a TODO list and do workouts.
			</Data>
		</Item>
		<Item>
			<Title>
				What is your technology wish list?
			</Title>
			<Data>
				Python, Mongo DB, DevOps
			</Data>
		</Item>
		<Item>
			<Title>
				Tell me about any achievement?
			</Title>
			<Data>
				Talk about NBE with 6 junior developers.
			</Data>
		</Item>
	</Section>
	<Section Title="Ask HR">
		<Item>
			<Title>
				Will you provide a Visa sponsorship?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				If you are satisfied about this interview, what’s the next step?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Do you have any comments for me?
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="Ask Technical">
		<Item>
			<Title>
				Could you please give me an overview about the project?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Do you have a different technical stack based on projects type?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is the software development methodology do you use now?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is the source control do you use now?
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="General">
		<Item>
			<Title>
				Factors to be considered when setting Application Architecture (technologies):
			</Title>
			<Data>
				- Third parties and integration with external systems <br />
				- Number of users  <br />
				- Performance, Security, Client requirements, Server OS and specs <br />
				- Modularity and Microservices, Handle generic request, Logs, Filters, ORM layer (business layer) <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Hosts file:
			</Title>
			<Data>
				is a local plain text file that maps servers or hostnames to IP addresses, Its located in C:\Windows\System32\drivers\etc\hosts
			</Data>
		</Item>
		<Item>
			<Title>
				TLS proxy:
			</Title>
			<Data>
				a layer between client and server to encrypt the request to secure connections to allow for additional networking services while protecting against denial-of-service attacks.
			</Data>
		</Item>
		<Item>
			<Title>
				Denial-of-Service (DoS) attack:
			</Title>
			<Data>
				is an attack meant to shut down a machine or network, making it inaccessible to its intended users. DoS attacks accomplish this by flooding the target with traffic, or sending it information that triggers a crash.
			</Data>
		</Item>
		<Item>
			<Title>
				Metricbeat
			</Title>
			<Data>
				is a lightweight shipper that you can install on your servers to periodically collect metrics from the operating system and from services running on the server. Metricbeat takes the metrics and statistics that it collects and ships them to the output that you specify, such as Elasticsearch or Logstash.
				<b> And you can visualize these metrics using Kibana.</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Heartbeat mechanism:
			</Title>
			<Data>
				monitors the connection between a manager and an agent and automates the cleanup procedure when the connection is lost. This enables both the manager and the agent to release resources that were allocated for maintaining the connection.
			</Data>
		</Item>
		<Item>
			<Title>
				SDLC and Work process:
			</Title>
			<Data>
				Requirement gathering and analysis, Design, Implementation or coding, Testing, Deployment, Maintenance:  <br />
				- Project preparation discuss resources and the skills needed, apply tranings or self-study if needed, define the sprint period and the story points count, define the branching strategy (pdf)  <br />
				- Kick-Off meeting (Project overview, technical stack, source control, project management tool, hosting platform, deployment approach, etc…)  <br />
				- All team members MUST understand the project business. <br />
				- Code Comments: every class should have a summery about its methods, every method should have a clear description, the class should not have non-related methods <br />
				- Having a standup everyday for 30 minutes <br />
				- Having a grooming meeting (to be recorded) between all the project teams including the business team to set priorities of backlog tickes and clarify and estimate tickets, the estimation include the development and testing efforts <br />
				- One of ticket\task readiness factors is to have a test cases so that the developer can convert it to unit tests, that should be runned every time we do a deployment. <br />
				- Any Commit should have a clear comment that include the ticket number also. <br />
				- Integrate Github with Jira to show the created branch, merge or pull request for each ticket <br />
				- Integrate Jira with WiKI (which contains all project docs and also the grooming recordings) <br />
				- Retrospective meetings: (every 2 weeeks or in general after every sprint) are a great opportunity for people to come together to talk about what went well, what didn’t go so well, and what will be changed for the next sprint, and agree on some action items (decisions) to solve that https://ideaboardz.com/for/Sprint%2035%20Retro/3906034  <br />
				<b>Work process: </b> <br />
				- Create a new Jira Board that define the tickets workflow: TODO > In Progress > Blocked > Code Review > QA > QA Sign Off > UAT > Done <br />
				- DB objects should be added to source control, by creating a DataBase project in Visual Studio <br />
				- Release branch should have some constrains so only the release manager person is the only person who can approve the changes <br />
				- Once you have a ticket, create a feature branch (feature/AS-1234) and start develop <br />
				- Once you finish > create Pull Request from your feature branch to develop branch <br />
				- Once merged to develop, the jenkins job for build and deploy will be auto-triggered to deploy to the QA environment <br />
				- Once we have the QA SignOff, merge between develop and release <br />
				- Once the merge done, it will trigger the jenkins job responsible to deploy to UAT <br />
				- Once deployed to UAT, the business team should validate the ticket <br />
				- Once we have the business team SignOff for all sprint tickets that will be included in the release, we run the jenkins job to deploy to prod from release branch <br />
				- Once the prod deployment done, the QA should run the regression test <br />
				- Once we have the prod SignOff, then merge from release to master and develop branches <br />
			</Data>
		</Item>
		<Item>
			<Title>
				C# memory management:
			</Title>
			<Data>
				C# employs automatic memory management which implemented by a <b>garbage collector</b>, The garbage collector checks to see if there are any objects in the heap that are no longer being used by the application. If such objects exist, then the memory used by these objects can be reclaimed. (If no more memory is available for the heap, then the new operator throws an OutOfMemoryException). <br />
				<b>The managed heap:</b> When an application calls the new operator to create an object, there may not be enough address space left in the region to allocate to the object. The heap detects this by adding the size of the new object to NextObjectPinter. If NextObjectPinter is beyond the end of the address space region, then the heap is full and a collection must be performed.
			</Data>
		</Item>
		<Item>
			<Title>
				Web Farm:
			</Title>
			<Data>
				is a group of two or more web servers (or nodes) that host multiple instances of an app. When requests from users arrive to a web farm, a load balancer distributes the requests to the web farm's nodes, so web farm improve Reliability/Availability, Capacity/Performance, Scalability, Maintainability
			</Data>
		</Item>
		<Item>
			<Title>
				CRM: stands for Customer Relationship Management,
			</Title>
			<Data>
				a CRM system allows businesses to manage business relationships and the data and information associated with them.
			</Data>
		</Item>
		<Item>
			<Title>
				CLI programming: CLI stands for Command Line Interface,
			</Title>
			<Data>
				Interpreter or Input which is a command line program that accepts text input to execute operating system functions.
			</Data>
		</Item>
		<Item>
			<Title>
				Micro services:
			</Title>
			<Data>
				is an architectural style that structures an application as a collection of services that are:
				Highly maintainable and testable, Loosely coupled, Independently deployable, Organized around business capabilities and
				Owned by a small team.
			</Data>
		</Item>
		<Item>
			<Title>
				Modularity:
			</Title>
			<Data>
				is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between client-side and server-side:
			</Title>
			<Data>
				the server side scripting involves server for its processing. ... The client-side script executes the code to the client side which is visible to the users while a server-side script is executed in the server end which users cannot see.
			</Data>
		</Item>
		<Item>
			<Title>
				Service Account
			</Title>
			<Data>
				is a user account that is created explicitly to provide a security context for services running on Windows Server operating systems. The security context determines the service's ability to access local and network resources. The Windows operating systems rely on services to run various features.
			</Data>
		</Item>
		<Item>
			<Title>
				Visual Studio CI/CD > Continuous Integration and Continuous Delivery:
			</Title>
			<Data>
				is a continuous delivery tool provided by TFS in visual studio which makes it simple to automate and stay up to date on your DevOps pipeline for ASP.NET and other projects targeting Azure.
			</Data>
		</Item>
		<Item>
			<Title>
				Jenkins:
			</Title>
			<Data>
				is a free and open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat.
			</Data>
		</Item>
		<Item>
			<Title>
				Rolling deployment
			</Title>
			<Data>
				allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources. <br></br>
				<b>Better to keep the app as stateless for rolling deployment</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Blue-green deployment
			</Title>
			<Data>
				is a technique that reduces downtime and risk by running two identical production environments called Blue and Green. At any time, only one of the environments is live, with the live environment serving all production traffic.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Ansible and Terraform and PowerShell:
			</Title>
			<Data>
				<b>Terraform</b> used to provision and configure infrastructure components, its written with (HCL) HashiCorp Configuration Language <br />
				<b>Ansible</b> used for deploy, install and manage the your application, its written with (YAML) <br />
				<b>PowerShell</b> is a Microsoft framework for automating tasks using a command-line shell and an associated scripting language. <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Docker:
			</Title>
			<Data>
				(developer share a copy of deployment server to tester to avoid issues because environment difference)
				is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.
			</Data>
		</Item>
		<Item>
			<Title>
				Kubernates:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Relational and non-relational databases:
			</Title>
			<Data>
				A relational database uses SQL (Structured Query Language) which storing data using tables, columns and rows but the non-relational databases (NoSQL) are document-oriented. Instead of using tables, these documents allow us to store unstructured JSON data in a single document.
			</Data>
		</Item>
		<Item>
			<Title>
				How does the internet work:
			</Title>
			<Data>
				The Internet is made up of a massive network of specialized computers called routers. Each router's job is to know how to move packets along from their source to their destination. A packet will have moved through multiple routers during its journey. When a packet moves from one router to the next, it's called a hop.
			</Data>
		</Item>
		<Item>
			<Title>
				Task implementation steps:
			</Title>
			<Data>
				- Defining the problem clearly <br />
				- Breaking the problem down into small, simple parts <br />
				- Define the solution for each part of the problem <br />
				- Implementing the solution <br />
				- Making it efficient (eventually) <br />
			</Data>
		</Item>
		<Item>
			<Title>
				OLAP (Online Analytical Processing) queries:
			</Title>
			<Data>
				OLAP is a category of software that allows users to analyze information from multiple database systems at the same time. It is a technology that enables analysts to extract and view business data from different points of view. OLAP stands for Online Analytical Processing.
				Analysts frequently need to group, aggregate and join data. These operations in relational databases are resource intensive. With OLAP data can be pre-calculated and pre-aggregated, making analysis faster.
				OLAP databases are divided into one or more cubes. The cubes are designed in such a way that creating and viewing reports become easy.
			</Data>
		</Item>
		<Item>
			<Title>
				Basic distributed computing concepts:
			</Title>
			<Data>
				A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another
			</Data>
		</Item>
		<Item>
			<Title>
				Web Socket:
			</Title>
			<Data>
				a protocol enables interaction between a web browser (or other client application) and a web server with lower overhead, exchange messages between client and server
				in server use TcpListner and in client use WebSocket
			</Data>
		</Item>
		<Item>
			<Title>
				Serverless Computing:
			</Title>
			<Data>
				is a cloud-computing execution model in which the cloud provider runs the server, and dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity.
			</Data>
		</Item>
		<Item>
			<Title>
				Scalable systems:
			</Title>
			<Data>
				is a system that is able to maintain its effectiveness throughout even if there are additions or expansions in aspects such as resources or the number of end users without disrupting its functionality then it can be called a scalable system.
			</Data>
		</Item>
		<Item>
			<Title>
				A/B testing:
			</Title>
			<Data>
				also known as split testing or bucket testing, is a method of comparing two versions of a webpage or app against each other to determine which one performs better.
			</Data>
		</Item>
		<Item>
			<Title>
				Agile environment:
			</Title>
			<Data>
				a group of software development methodologies based on iterative development, where requirements and solutions evolve through collaboration between self-organizing cross-functional teams and Client/End user.
			</Data>
		</Item>
		<Item>
			<Title>
				Agile Scrum:
			</Title>
			<Data>
				is one of the implementations of agile methodology. In which incremental builds are delivered to the customer in every two to three weeks' time. it has a 3 key roles: Product Owner, Scrum Master, Development Team
				Sprint > EPIC > User Story > Feature > Task
				<b>* Every day a scrum meeting (stand-up meeting) for 15 minutes to discuss:</b> What’s done yesterday? What will be done today? What’s your obstacles?
				<b>Scrum Master</b> is the person who ensures that the team adheres to scrum theory, practices, and rules and protects the team by doing anything possible to help the team perform at the highest level. This may include removing impediments, facilitating meetings, and helping the Product Owner groom the backlog.
			</Data>
		</Item>
		<Item>
			<Title>
				Code Quality Factors:
			</Title>
			<Data>
				Code Reviews, Readability, Maintainability, Code Documentation, Best Practice coding, follow a consistent style, Unit Testing so it should be testable by building a good software structure with less coupling.
			</Data>
		</Item>
		<Item>
			<Title>
				Coding Standards:
			</Title>
			<Data>
				there are some tools like SonarLint and TSLint.
			</Data>
		</Item>
		<Item>
			<Title>
				SLA Service Level Agreement:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Quality Gates:
			</Title>
			<Data>
				Definitions for A Quality Gate is a special milestone in a software project Quality Gates are located before a phase that is strongly dependent on the outcome of a previous phase They are especially useful between phases.
				Formal sign-off and acceptance are mandatory at each gate.
				<b>Putting some measures to be checked after every phase of application. </b>
			</Data>
		</Item>
		<Item>
			<Title>
				CI/CD:
			</Title>
			<Data>
				CI (establish a consistent and automated way to build, package, and test applications, each change in code triggers an automated build-and-test sequence for the given project)
				CD (Package the build output files to deploy to server)
			</Data>
		</Item>
		<Item>
			<Title>
				CI/CD Pipelines:
			</Title>
			<Data>
				helps you automate steps in your software delivery process, such as initiating code builds, running automated tests, and deploying to a staging or production environment.
				Also you can inject another layers inside these steps like a layer for checking coding style
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between bat and powershell scripts:
			</Title>
			<Data>
				Batch files are generally executed by CMD.exe; PowerShell is executed by PowerShell.exe.
				PowerShell includes extra features and commands that aren't in cmd.exe
			</Data>
		</Item>
		<Item>
			<Title>
				Regression Test:
			</Title>
			<Data>
				A test that was written when a bug was fixed. It ensures that this specific bug will not occur again.
			</Data>
		</Item>
		<Item>
			<Title>
				Sanity Test:
			</Title>
			<Data>
				is done to check the new functionality/bugs have been fixed
			</Data>
		</Item>
		<Item>
			<Title>
				Integration Test:
			</Title>
			<Data>
				Test the correct inter-operation of multiple subsystems. There is whole spectrum there, from testing integration between two classes, to testing integration with the production environment.
			</Data>
		</Item>
		<Item>
			<Title>
				Smoke Test:
			</Title>
			<Data>
				also known as “Build Verification Testing”, is a type of software testing that comprises of a non-exhaustive set of tests that aim at ensuring that the most important functions work. The result of this testing is used to decide if a build is stable enough to proceed with further testing.
			</Data>
		</Item>
		<Item>
			<Title>
				Testing Pyramid (higher to lower cost)
			</Title>
			<Data>
				..........UI <br />
				.....Service(API) <br />
				.Unit Test (smaller components)
			</Data>
		</Item>
		<Item>
			<Title>
				Code Smell
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Advantages of ORM:
			</Title>
			<Data>
				reduce query repetition, take the benefit of OOP to build a maintainable code
			</Data>
		</Item>
		<Item>
			<Title>
				DisAdvantages of ORM:
			</Title>
			<Data>
				performance
			</Data>
		</Item>
		<Item>
			<Title>
				Syntactic Sugar:
			</Title>
			<Data>
				means that the new features of the language are not really new. Instead, they are a nicer syntax for something existing/ You could do exactly the same by writing something different in the old version. ... Anything which is simplified is a syntactic sugar.
			</Data>
		</Item>
		<Item>
			<Title>
				Cross-site request forgery (CSRF):
			</Title>
			<Data>
				also known as one-click attack or session riding and abbreviated as CSRF, is a type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts.
				There are many ways in which a malicious website can transmit such commands; specially-crafted image tags, hidden forms, and JavaScript XMLHttpRequests, for example, can all work without the user's interaction or even knowledge. Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser.<br />
				<b>To prevent CSRF: inject an authentication token in every request to be validated in middleware</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Cross-Site Scripting (XSS) Attacks:
			</Title>
			<Data>
				are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.
			</Data>
		</Item>
		<Item>
			<Title>
				Hadoop:
			</Title>
			<Data>
				is a software technology designed for storing and processing large volumes of data distributed across a cluster of commodity servers and commodity storage.
			</Data>
		</Item>
		<Item>
			<Title>
				Rabbit MQ and MSMQ:
			</Title>
			<Data>
				<b>Rabbit MQ</b> gave slightly better performance than MSMQ, but both were comprehensively out performed by ZeroMQ. If performance is your main criteria, you should definitely look at ZeroMQ.
				<b>MSMQ:</b> is a simple store-and-forward queue. It doesn't provide any messaging patterns, such as pub/sub, or routing. For anything beyond simple point-to-point messaging you'd probably want to use a service bus library such as NServiceBus or MassTransit on top of MSMQ.
				<b>Rabbit MQ</b> is a sophisticated server product that provides complex messaging patterns, topics and routing out-of-the-box. You also get centralized management and DR, something you'd have to implement yourself if you chose MSMQ.
				<b>Rabbit MQ Workflow:</b><br/>
				> The producer publishes a message to the exchange. <br/>
				> The exchange receives the message and is now responsible for the routing of the message. <br/>
				> Binding must be set up between the queue and the exchange. In this case, we have bindings to two different queues from the exchange. <br/>
				> The exchange routes the message into the queues. The messages stay in the queue until they are handled by a consumer. <br/>
				> The consumer handles the message.
			</Data>
		</Item>
		<Item>
			<Title>
				Rabbit MQ Cluster:
			</Title>
			<Data>
				is a logical grouping of one or several nodes, each sharing users, virtual hosts, queues, exchanges, bindings, runtime parameters and other distributed state.
			</Data>
		</Item>
		<Item>
			<Title>
				Separation of Concern SOC:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Change-Advisory Board (CAB)
			</Title>
			<Data>delivers support to a change-management team by advising on requested changes, assisting in the assessment and prioritization of changes.</Data>
		</Item>
		<Item>
			<Title>
				Grooming (or refinement)
			</Title>
			<Data>
				is a meeting of the Scrum team in which the product backlog items are discussed and the next sprint planning is prepared.
			</Data>
		</Item>
		<Item>
			<Title>
				Data warehouses
			</Title>
			<Data>
				are used for analytical purposes and business reporting. Data warehouses typically store historical data by integrating copies of transaction data from disparate sources<br />
				<b>Data warehouse</b> is a system that stores data from a company's operational databases as well as external sources. Data warehouse platforms are different from operational databases because they store historical information, making it easier for business leaders to analyze data over a specific period of time.<br />
				<b>Also to enhance querying performance by reducing the number of records after moving the historical records to the warehousing DB</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Mortgage Release
			</Title>
			<Data>
				is where you, the homeowner, voluntarily transfer the ownership of your property to the owner of your mortgage in exchange for a release from your mortgage loan and payments
			</Data>
		</Item>
		<Item>
			<Title>
				Data models
			</Title>
			<Data>
				define how data is connected to each other and how they are processed and stored inside the system.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Requests that responded live are Syncronous requests and the other are Asyncronous requests.
			</Data>
		</Item>
		<Item>
			<Title>
				Stateless Application
			</Title>
			<Data>
				is an application program that does not save client data generated in one session for use in the next session with that client. <br />
				<b>Stateful Application</b> saves data about each client session and uses that data the next time the client makes a request.
			</Data>
		</Item>
		<Item>
			<Title>
				SSO
			</Title>
			<Data>
				<img src="/images/sso.png" />
			</Data>
		</Item>
	</Section>
	<Section Title="HTML">
		<Item>
			<Title>
				DOM: (Document Object Model)
			</Title>
			<Data>
				represents the HTML document that is displayed in that window. The Document object has various properties that refer to other objects which allow access to and modification of document content.
			</Data>
		</Item>
		<Item>
			<Title>
				Web storage types (session storage and local storage) > difference:
			</Title>
			<Data>
				<code>window.localStorage</code>: stores data with no expiration date, data stored per origin (a combination of protocol, host name, and port number)<br/>
				<code>window.sessionStorage</code>: stores data for one session (data is lost when the browser tab is closed) <br/>
				* <b>so,</b> If you want to store a different data for the same app while open 2 tabs you should use session storage.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between UL and OL:
			</Title>
			<Data>
				UL means "unordered list". OL means "ordered list". UL gets you bullet points. OL gets you numbers
			</Data>
		</Item>
		<Item>
			<Title>
				How to group a form elements:
			</Title>
			<Data>
				Field set and Legend
			</Data>
		</Item>
		<Item>
			<Title>
				What is input types?
			</Title>
			<Data>
				Button, date, email, file, submit, radio, checkbox, etc…
			</Data>
		</Item>
		<Item>
			<Title>
				HTML5 tags:
			</Title>
			<Data>
				like article, footer, section, etc
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between .attr() and .prop():
			</Title>
			<Data>
				prop has no value (checked, disabled, etc...)
				Attributes are physical written in HTML but properties not
			</Data>
		</Item>
		<Item>
			<Title>
				XHTML:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XSL:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XSLT:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XPath and XQuery:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				we can transform (XML and XSL\XSLT) to XHTML in client side using JS or in server side
			</Data>
		</Item>
	</Section>
	<Section Title="CSS">
		<Item>
			<Title>
				Bootstrap:
			</Title>
			<Data>
				is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and JavaScript-based design templates for typography, forms, buttons, navigation and other interface components.
			</Data>
		</Item>
		<Item>
			<Title>
				What’s the difference between display: block, inline and inline-block:
			</Title>
			<Data>
				display: inline-block allows to set a width and height on the element. Also, with display: inline-block , the top and bottom margins/paddings are respected, but with display: inline they are not.
			</Data>
		</Item>
		<Item>
			<Title>
				What is the different ways to apply CSS on element:
			</Title>
			<Data>
				Inline, Internal (in style tag) or External
			</Data>
		</Item>
		<Item>
			<Title>
				CSS selectors:
			</Title>
			<Data>
				https://www.w3schools.com/cssref/css_selectors.asp
			</Data>
		</Item>
		<Item>
			<Title>
				How select the last child of an element:
			</Title>
			<Data>
				<code>element > *:last-child {}</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How select nth child of an element: element:
			</Title>
			<Data>
				<code>nth-child(n)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				CSS Coloring: (color name, HEX color and RGB)
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				What is new in CSS3:
			</Title>
			<Data>
				Selectors: can use regular expressions formula (^ starts with, $ ends with, * contains, etc...) <br />
				Rounded Corners and Border Image: using border-radius and border-image <br />
				Box Shadow and Text Shadow: using box-shadow and text-shadow <br />
				RGPA colors with opacity.
			</Data>
		</Item>
	</Section>
	<Section Title="JavaScript and JQuery">
		<Item>
			<Title>
				Syntax of document ready, what is the different ways?
			</Title>
			<Data>
				<code> $(document).ready(function(){});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to get\set element text\html:
			</Title>
			<Data>
				<code> .text() .html()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Document Ready Event in JS:
			</Title>
			<Data>
				<code> document.addEventListener("DOMContentLoaded", function () {});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Array.map() and Array.forEach:
			</Title>
			<Data>
				<code>arr.forEach((item, index) => {return item++});</code>
				<code>forEach()</code> changes the original array, whereas <code>map()</code> returns a new array, without mutating the original array.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Javascript has only one thread but the browser has many
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can stop <code>var xx = setInterval(fun(), interval)</code> by <code>clearInterval(xx);</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What’s the different ways to bind event on HTML element:
			</Title>
			<Data>
				<b>JS:</b> <code>element.addEventListener(event, function, useCapture);</code> <br />
				<b>JQ:</b> <code>$(element).eventName(function(){});</code> or <code>$(element).on(“eventName”, function(){});</code> so the difference is <code>on()</code> is binding event to element dynamically using below:
				<code>$(parentElement).on(‘eventName’, ‘dynamicElemnt’, function(){});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between bind() * live():
			</Title>
			<Data>
				<code>bind()</code> attachs events to elements that exist or match the selector at the time the call is made. Any elements created afterwards or that match going forward because the class was changed, will not fire the bound event. <br />
				<code>.live()</code> works for existing and future matching elements.
			</Data>
		</Item>
		<Item>
			<Title>
				JQ effects methods:
			</Title>
			<Data>
				<code>animate(), fadein(), fadeout()</code>, etc..
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between parent(), children() and siblings():
			</Title>
			<Data>
				Siblings: are all elements in the same level and same parent
			</Data>
		</Item>
		<Item>
			<Title>
				DOM Model:
			</Title>
			<Data>
				is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between null and undefined:
			</Title>
			<Data>
				undefined means a variable has been declared but has not yet been assigned a value. On the other hand, null is an assignment value.
			</Data>
		</Item>
		<Item>
			<Title>
				Browser Indexed DB:
			</Title>
			<Data>
				is a new HTML5 concept to store the data inside user's browser. indexeddb is more power than local storage and useful for applications that requires to store large amount of the data.
				> It stores key-pair values > It is not a relational database > IndexedDB API is mostly asynchronous > it is not a structured query language > it has supported to access the data from same domain
			</Data>
		</Item>
		<Item>
			<Title>
				Abort Controller:
			</Title>
			<Data>
				interface represents a controller object that allows you to abort one or more Web requests as and when desired.
				const abortController = new AbortController();
				abortController.abort();
			</Data>
		</Item>
		<Item>
			<Title>
				Prototypal Inheritance in JS:
			</Title>
			<Data>
				Each object has a private property which holds a link to another object called its prototype.<br />
				<code>
					function Person(first, last, age, eyecolor) { <br />
					this.firstName = first;<br />
					this.lastName = last;<br />
					}<br />
					Person.prototype.nationality = "English";<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to remove binding from element:
			</Title>
			<Data>
				<b>JS:</b> element. detachEvent(); <br />
				<b>JQ:</b> $(element).unbind(“event name”);
			</Data>
		</Item>
		<Item>
			<Title>
				What is preventDefault():
			</Title>
			<Data>
				it cancels the event’s default behavior if it is cancelable, meaning that the default action that belongs to the event will not occur.
			</Data>
		</Item>
		<Item>
			<Title>
				How to remove an element from DOM:
			</Title>
			<Data>
				<code>$(element). remove();</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to add\remove class from element:
			</Title>
			<Data>
				<code>$(element). addClass().removeClass();</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Keyboard events:
			</Title>
			<Data>
				<code>keyup()</code> – Fire when user releases a key on the keyboard.<br />
				<code>keydown()</code> – Fire when user presses a key on the keyboard.<br />
				<code>keypress()</code> – Fire when user presses a key on the keyboard.<br />
				Keypress respects case sensitivity when accessing char ASCII code
			</Data>
		</Item>
		<Item>
			<Title>
				Keyboard events:
			</Title>
			<Data>
				<code>keyup()</code> – Fire when user releases a key on the keyboard.<br />
				<code>keydown()</code> – Fire when user presses a key on the keyboard.<br />
				<code>keypress()</code> – Fire when user presses a key on the keyboard.<br />
				<b>Keypress respects case sensitivity when accessing char ASCII code</b>
			</Data>
		</Item>
		<Item>
			<Title>
				String operations:
			</Title>
			<Data>
				JS:<code> length, indexOf(‘xx’), indexOf(‘xx’, startIndex), lastIndexOf(‘xx’), search(‘xx’)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is array.slice():
			</Title>
			<Data>
				returns the selected elements in an array, as a new array object.
			</Data>
		</Item>
		<Item>
			<Title>
				How to apply styles on element using JQuery:
			</Title>
			<Data>
				<code>.css()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Best performance of JS Loops:  a standard for loop with length caching:
			</Title>
			<Data>
				<code>
					for (var i = 0, len = myArray.length; i less than len; i++) { <br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Comments:
			</Title>
			<Data>
				<code>
					// /* */
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Inheritance in JS:
			</Title>
			<Data>
				<code>
					using prototype
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Regular Expressions:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				JavaScript ecosystem:
			</Title>
			<Data>
				is a collection of software packages, libraries, and other resources that facilitate development as they integrate with each other.<br />
				Those tools are created by different developers and providers <br />
				– for example, the React library is powered by Facebook, while the Angular framework was created by Google, and Vue.js was designed by an independent developer.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between var, let and const:
			</Title>
			<Data>
				<code>var</code> can be updated and re-declared within its scope; <br />
				<code>let</code> can be updated but not re-declared; <br />
				<code>const</code> can neither be updated nor re-declared. <br />
				They are all hoisted to the top of their scope but while var variables are initialized with undefined, let and const variables are not initialized.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Bind, Call and Apply:
			</Title>
			<Data>
				all of it to invoke a function, use <code>.call()</code> or <code>.apply()</code> when you want to invoke the function immediately, and modify the context. <code>call()/apply()</code> call the function immediately, whereas <code>bind()</code> returns a function that, when later executed, will have the correct context set for calling the original function.<br />
				<code>
					var person1 = {name: 'Marvin', age: 42, size: '2xM'}; <br/>
					var sayHello = function(){<br/>
					alert('Hello, ' + this.name);<br/>
					};<br/>
					sayHello.call(person1);<br/>
					sayHello.apply(person1);<br/>
				</code>
				* the 1st parameter should be the scope object (this)<br/>
				* What if you need to pass parameters to the function while invoking it you should use <code>.call()</code> but if you have many parameters (arguments) then you should use .apply() because it expects the 2nd parameter as array of arguments.
			</Data>
		</Item>
		<Item>
			<Title>
				Implicit and Explicit binding:
			</Title>
			<Data>
				Implicit when this keyword presented inside code but Explicit when this keyword explicitly passed by <code>.call()</code>, <code>.apply()</code> or <code>.bind()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				This and Context:
			</Title>
			<Data>
				this is just the current context (caller)
			</Data>
		</Item>
		<Item>
			<Title>
				Strict mode:
			</Title>
			<Data>
				introduced in ES5, it throws reference error when using variable before declaring it.
			</Data>
		</Item>
		<Item>
			<Title>
				Variable scope in JS:
			</Title>
			<Data>
				JavaScript has two scopes – global and local. Any variable declared outside of a function belongs to the global scope, and is therefore accessible from anywhere in your code. Each function has its own scope, and any variable declared within that function is only accessible from that function and any nested functions.
			</Data>
		</Item>
		<Item>
			<Title>
				Event delegation in JS:
			</Title>
			<Data>
				is adding event listener to parent element instead of adding to every child and inside this event using <code>event.target</code> you can detect which child who fired the event.<br />
				And using <code>event.currentTarget</code> to access the parent element
			</Data>
		</Item>
		<Item>
			<Title>
				Event propagation:
			</Title>
			<Data>
				is a mechanism that defines how events propagate or travel through the DOM tree to arrive at its target and what happens to it afterward. <br />
				* when you have a nested element(s) which assigned the same event (ex, click) so when you click on any one the other events fire so <code> event.stopPropagation()</code> will stop propagating event to other elements.<br />
				> It has 2 types:<br />
				<b>Capturing:</b> Spreading event inside. <br/>
				<b>Bubbling:</b> Spreading event outside.
			</Data>
		</Item>
		<Item>
			<Title>
				Event propagation:
			</Title>
			<Data>
				is a mechanism that defines how events propagate or travel through the DOM tree to arrive at its target and what happens to it afterward. <br />
				* when you have a nested element(s) which assigned the same event (ex, click) so when you click on any one the other events fire so <code> event.stopPropagation()</code> will stop propagating event to other elements.<br />
				> It has 2 types:<br />
				<b>Capturing:</b> Spreading event inside. <br/>
				<b>Bubbling:</b> Spreading event outside.
			</Data>
		</Item>
		<Item>
			<Title>
				How many 8-bit in text to be stored in Utf-8?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				When shouldn’t use arrow function:
			</Title>
			<Data>when you want to access something from this (caller)</Data>
		</Item>
		<Item>
			<Title>
				Difference between Reference Error and Undefined:
			</Title>
			<Data>in ES6 when using undeclared variable it will throw reference error but in earlier versions of JS will output undefined</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>any undeclared variable (without var keyword) becomes global</Data>
		</Item>
		<Item>
			<Title>
				JS Versions and difference:
			</Title>
			<Data>ES Standard, ES2015, ES6 and ES Next</Data>
		</Item>
		<Item>
			<Title>
				Let keyword:
			</Title>
			<Data>
				make the variable block scope not function scope, if you defined var inside loop it will be accessible to its function but let wont be. <br />
				<code>
					var x = function(){<br/>
					for(var x = 0; x less than 2; x++){<br />
					let y = 4;<br />
					}<br />
					console.log(y);<br />
					}
				</code><br />
				if you run x() >> output : ReferenceError: y is not defined <br />
				but if you use var instead of let >> output : 4
			</Data>
		</Item>
		<Item>
			<Title>
				Immutable Variables:
			</Title>
			<Data>
				are variables whose value cannot be modified once assigned (const)
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between function declaration and function expression:
			</Title>
			<Data>
				Function declaration like <code>function foo(){ … }</code><br />
				Function expression like <code>var foo = function(){ … }</code> <br />
				* Function declaration is hoisted but expression isn’t.
			</Data>
		</Item>
		<Item>
			<Title>
				Ternary operator (? and :)
			</Title>
			<Data>
				like this condition <code> ? true : false</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Null Conditional Operator:
			</Title>
			<Data>
				<code>object?.property ?? defaultvalue</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can dynamically validate function parameters using arguments keyword
			</Data>
		</Item>
		<Item>
			<Title>
				DOM reflow:
			</Title>
			<Data>
				a web browser process for re-calculating the positions and geometries of elements in the document, for the purpose of re-rendering part or all of the document.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				let and const are not hoisted because it provide a block scope
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				string can be converted to number by putting + before it: <code>var x = ‘23’;   var y = +x; // 23</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can convert number to string by putting ‘’ + befor it: <code>var x = 23;   var y = ‘’ + x; // “23”</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Caching Client Side:
			</Title>
			<Data>
				Caching is used for web performance optimization since the configuration and server connectivity data are usually stored in Cookies but the popular data in web storage (sessionStorage and localStorage) <br />
				<b>Cookie:</b> (Cookies are data, stored in small text files, on your computer) stores data that has to be sent back to the server with subsequent requests.<br />
				There are some libraries used in caching: Modenizr and Redis
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				<code>
					let x = 0, isTrue = false; <br />
					if(x) isTrue = true;
				</code> >> still false
			</Data>
		</Item>
		<Item>
			<Title>
				Syntactic Sugar:
			</Title>
			<Data>
				is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Closure in JS:
			</Title>
			<Data>
				means writing a nested functions in which Inner function can access variables and parameters of an outer function (however, cannot access arguments object of outer function)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				instead of using callback to handle response and error, you can use promises by <code>.then(handleResponseFnc).catch(handleErrorFnc)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Promises in JS:
			</Title>
			<Data>
				The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value, it has 3 states: <br />
				Pending: initial state, neither fulfilled nor rejected.<br />
				Fulfilled: meaning that the operation completed successfully.<br />
				Rejected: meaning that the operation failed.<br />
				<code>
					const myPromise = (new Promise(myExecutorFunc)).then(handleFulfilledA,handleRejectedA)<br />
					.then(handleFulfilledB,handleRejectedB)<br />
					.then(handleFulfilledC,handleRejectedC);
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between promises.All and promises.Each:
			</Title>
			<Data>
				The <code>Promise.all()</code> method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises or when the iterable contains promises that have been fulfilled and non-promises that have been returned. It rejects with the reason of the first promise that rejects, or with the error caught by the first argument if that argument has caught an error inside it using <code>try/catch/throw</code> blocks. <br />
				<code>
					const promise1 = Promise.resolve(3); <br />
					const promise2 = 42; <br />
					const promise3 = new Promise((resolve, reject) => { <br />
					setTimeout(resolve, 100, 'foo'); <br />
					}); <br />
					Promise.all([promise1, promise2, promise3]).then((values) => { <br />
					console.log(values); <br />
					});
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is Async and Await :
			</Title>
			<Data>
				async/await simply gives you a synchronous feel to asynchronous code. It's a very elegant form of syntactical sugar, it require a transpiler to be read be browser (babel).<br />
				<b>await:</b> block code execution until finish it, and it should be used if the next step depends on the previous operation result.<br />
				<code>
					while (!value) {<br />
					const intermediate = await operation1();<br />
					value = await operation2(intermediate);<br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Marking function as async makes it also return a promise. This is done automatically for you, so you don't need to return a promise explicitly.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				the await keyword is only valid inside async functions
			</Data>
		</Item>
		<Item>
			<Title>
				What is Array.reduce :
			</Title>
			<Data>
				used to reduce the array to a single value and executes a provided function for each value of the array (from left-to-right) and the return value of the function is stored in an accumulator.<br />
				<code>array.reduce( function(accumulator, currentValue, currentIndex, arr), initialValue )</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is the output of the below code: How setTimeout function works ?
			</Title>
			<Data>
				<code>
					for( I = 0; I leth than 5; i++){<br />
					setTimeout( ()=>{console.log(i)});<br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				use string literal (`) to avoid conflicts of single\double quotes of string and to bind a value of variable inside string
				<code>
					var x = 3;<br />
					var y = `this is x = ${x}’;
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Bugsnag:
			</Title>
			<Data>
				Error Monitoring and Reporting Tool for App Stability
			</Data>
		</Item>
		<Item>
			<Title>
				Sentry:
			</Title>
			<Data>
				Used to capture Javascript errors
			</Data>
		</Item>
		<Item>
			<Title>
				HotJar:
			</Title>
			<Data>
				Monitor and fix the UX errors of your application.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between event target and currentTarget :
			</Title>
			<Data>
				target is the element that triggered the event (e.g., the user clicked on) currentTarget is the element that the event listener is attached to.
			</Data>
		</Item>
		<Item>
			<Title>
				How to authenticate API from frontend:
			</Title>
			<Data>
				Using JWT to be sent in every request header, a JWT is a token that is issued by the server. The token has a JSON payload that contains information specific to the user. This token can be used by clients when talking to APIs (by sending it along as an HTTP header) so that the APIs can identify the user represented by the token, and take user specific action.<br />
				The JWT needs to be stored inside an httpOnly cookie, a special kind of cookie that’s only sent in HTTP requests to the server
			</Data>
		</Item>
		<Item>
			<Title>
				JWT (JSON Web Token):
			</Title>
			<Data>
				way for securely transmitting information between parties as a base64 encoded JSON object, consist of three parts separated by dots (header.payload.signature) <br />
				So Header contains the algorithm name and type (JWT)  <br />
				Payload contains some useful data (user claims) like iss (issuer), exp (expiration time), sub (subject), aud (audience), and others. <br />
				Signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is. <br />
				> A JWT is not encrypted. It is based64 encoded and signed. So anyone can decode the token and use its data.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Selenium Testing:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is End To End Testing:
			</Title>
			<Data>
				The entire application is tested for critical functionalities such as communicating with the other systems, interfaces, database, network, and other applications.
			</Data>
		</Item>
		<Item>
			<Title>
				Functional Programming:
			</Title>
			<Data>
				define the problem as a small functions that its output depend on the parameters .. <br />
				it acheives modularity and may be related to Business Rule Engine (BRE) => may be :D
			</Data>
		</Item>
		<Item>
			<Title>
				Reactive Programming (RP):
			</Title>
			<Data>
				(is programming with asynchronous data streams), (It is an Asynchronous Programming concept around data streams.), (is writing code that define how to react to changes) and (is a programming paradigm oriented around data flows and the propagation of change.) <br/>
				<code>
					var x = 10; <br/>
					var y = 20; <br/>
					let z = x + y; <br/>
					console.log(z);<br/>
					x = 100;<br/>
					y = 200; <br/>
					console.log(z);
				</code><br/>
				So here the variable Z will not be changed and RP is to write code that define how to react to changes by definining data\code as streams:<br />
				import {Observable} from 'rxjs-es'; Using Observable represented in RXJS and to subscribe to specific variables.<br />
				> Both promise and observables are built to solve problems around async (to avoid “callback hell”).<br />
				> An observer is object literal with <code>next()</code>, <code>error()</code> and <code>complete()</code> functions. In the above example, the observer is the object literal we pass into our <code>.subscribe()</code> method.
			</Data>
		</Item>
		<Item>
			<Title>
				Callback Hell:
			</Title>
			<Data>
				is having a lot of nested callback functions, Each inner callback is dependent on its parent (code becomes obscure or difficult to follow.)<br />
				So promises and observable (RXJS) fixed this problem.
			</Data>
		</Item>
		<Item>
			<Title>
				RXJS (Reactive Extensions for JavaScript):
			</Title>
			<Data>
				is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code.
			</Data>
		</Item>
		<Item>
			<Title>
				ErrorFirst Callback:
			</Title>
			<Data>
				is simply structuring the callback function by writing the first argument\parameter as error object and the subsequent arguments represent associated data.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Hoisting:
			</Title>
			<Data>
				is moving variables and functions declarations (not initializations) to the top of their scope before code execution, hoisting has order while topping up > variable assignment, function declaration then variable declaration
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between variable hoisting and function hoisting:
			</Title>
			<Data>
				Unlike variables, a function declaration doesn't just hoist the function's name. It also hoists the actual function definition. <br />
				As you can see, the JavaScript interpreter allows you to use the function before the point at which it was declared in the source code.
			</Data>
		</Item>
	</Section>
	<Section Title="Typescript">
		<Item>
			<Title>
				A clear difference between ECMA Script 5 and 6?
			</Title>
			<Data>
				ES6 added some features to ES5 like const, let , etc…
			</Data>
		</Item>
	</Section>
</Sections>
<?xml version="1.0" encoding="utf-8" ?>
<Sections>
	<Section Title="HR">
		<Item>
			<Title>Introduce yourself?</Title>
			<Data>Name, age, education, job history, current technical stack.</Data>
		</Item>
		<Item>
			<Title>What’s your salary expectations?</Title>
			<Data>
				Search about salary ranges in the job <b>country</b>.
			</Data>
		</Item>
		<Item>
			<Title>
				What do you know about our company?
			</Title>
			<Data>
				Company’s products and vision) > website.
			</Data>
		</Item>
		<Item>
			<Title>
				Please tell us about the situation, when you showed your leadership?
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Please tell about the situation, when you had a conflict and how you resolved it?
			</Title>
			<Data>
				Listen for everyone involved, friendly discussions and motivation.
			</Data>
		</Item>
		<Item>
			<Title>
				Why do you want to relocate joining our company?
			</Title>
			<Data>
				Talk about company environment advantages.
			</Data>
		</Item>
		<Item>
			<Title>
				What do you know about the country you applied for?
			</Title>
			<Data>
				Talk about country advantages.
			</Data>
		</Item>
		<Item>
			<Title>
				What is your preference of technologies (the ideal technology) you want to work with?
			</Title>
			<Data>
				Talk about current and preferred technical stack
			</Data>
		</Item>
		<Item>
			<Title>
				What are your strengths and weaknesses?
			</Title>
			<Data>
				Strength: never stop until I got my task finished.
				Weakness: sometimes I forget something I should do and I’m working on this issue by using a TODO list and do workouts.
			</Data>
		</Item>
		<Item>
			<Title>
				What is your technology wish list?
			</Title>
			<Data>
				Python, Mongo DB, DevOps
			</Data>
		</Item>
		<Item>
			<Title>
				Tell me about any achievement?
			</Title>
			<Data>
				Talk about NBE with 6 junior developers.
			</Data>
		</Item>
	</Section>
	<Section Title="Ask HR">
		<Item>
			<Title>
				Will you provide a Visa sponsorship?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				If you are satisfied about this interview, what’s the next step?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Do you have any comments for me?
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="Ask Technical">
		<Item>
			<Title>
				Could you please give me an overview about the project?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Do you have a different technical stack based on projects type?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is the software development methodology do you use now?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is the source control do you use now?
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="General">
		<Item>
			<Title>
				Factors to be considered when setting Application Architecture (technologies):
			</Title>
			<Data>
				- Third parties and integration with external systems <br />
				- Number of users  <br />
				- Performance, Security, Client requirements, Server OS and specs <br />
				- Modularity and Microservices, Handle generic request, Logs, Filters, ORM layer (business layer) <br />
			</Data>
		</Item>
		<Item>
			<Title>
				GIT Steps:
			</Title>
			<Data>
				Stage, Commit, and Push to pull request that you previously created. <br />
				> Git is a distributed version control system but TFS is a centralized VCS, so in GIT, every one has a local copy of the source code and also support branching. <br />
				> Git Command (git config) has a 3 levels of configuration: (git config --global) which use the global config file to be applied on all users that use this computer, (git config --system) which use the system config file to be applied on all repositories for current user and (git config --local) use use the repository config file to be applied on a particular repository <br />
				> Every Git Commit contains a complete snapshot of the respo. <br />
				> Use command (git status) to show the status of your changes, or (git status -s) for short status <br />
				> Git > local changes > stagging are (local) the stagging are is called (index) > push to remote server <br />
				> If you want to review the stagged files before commit, use this command (git diff --staged) <br />
				> To view history of repo activities, use (git log) <br />
				> The branch is a new commit that pointing to some particular parent (commit in another branch) <br />
				> The merge is nothing but a new commit that pointing to 2 parents (2 commits in 2 branches) <br />
				> (git rebase) is simply making the branch pointing to some particular parent branch(commit) <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Hosts file:
			</Title>
			<Data>
				is a local plain text file that maps servers or hostnames to IP addresses, Its located in C:\Windows\System32\drivers\etc\hosts
			</Data>
		</Item>
		<Item>
			<Title>
				TLS proxy:
			</Title>
			<Data>
				a layer between client and server to encrypt the request to secure connections to allow for additional networking services while protecting against denial-of-service attacks.
			</Data>
		</Item>
		<Item>
			<Title>
				Denial-of-Service (DoS) attack:
			</Title>
			<Data>
				is an attack meant to shut down a machine or network, making it inaccessible to its intended users. DoS attacks accomplish this by flooding the target with traffic, or sending it information that triggers a crash.
			</Data>
		</Item>
		<Item>
			<Title>
				Metricbeat
			</Title>
			<Data>
				is a lightweight shipper that you can install on your servers to periodically collect metrics from the operating system and from services running on the server. Metricbeat takes the metrics and statistics that it collects and ships them to the output that you specify, such as Elasticsearch or Logstash.
				<b> And you can visualize these metrics using Kibana.</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Heartbeat mechanism:
			</Title>
			<Data>
				monitors the connection between a manager and an agent and automates the cleanup procedure when the connection is lost. This enables both the manager and the agent to release resources that were allocated for maintaining the connection.
			</Data>
		</Item>
		<Item>
			<Title>
				SDLC and Work process:
			</Title>
			<Data>
				Requirement gathering and analysis, Design, Implementation or coding, Testing, Deployment, Maintenance:  <br />
				- Project preparation discuss resources and the skills needed, apply tranings or self-study if needed, define the sprint period and the story points count, define the branching strategy (pdf)  <br />
				- Kick-Off meeting (Project overview, technical stack, source control, project management tool, hosting platform, deployment approach, etc…)  <br />
				- All team members MUST understand the project business. <br />
				- Code Comments: every class should have a summery about its methods, every method should have a clear description, the class should not have non-related methods <br />
				- Having a standup everyday for 30 minutes <br />
				- Having a grooming meeting (to be recorded) between all the project teams including the business team to set priorities of backlog tickes and clarify and estimate tickets, the estimation include the development and testing efforts <br />
				- One of ticket\task readiness factors is to have a test cases so that the developer can convert it to unit tests, that should be runned every time we do a deployment. <br />
				- Any Commit should have a clear comment that include the ticket number also. <br />
				- Integrate Github with Jira to show the created branch, merge or pull request for each ticket <br />
				- Integrate Jira with WiKI (which contains all project docs and also the grooming recordings) <br />
				- Retrospective meetings: (every 2 weeeks or in general after every sprint) are a great opportunity for people to come together to talk about what went well, what didn’t go so well, and what will be changed for the next sprint, and agree on some action items (decisions) to solve that https://ideaboardz.com/for/Sprint%2035%20Retro/3906034  <br />
				<b>Work process: </b> <br />
				- Create a new Jira Board that define the tickets workflow: TODO > In Progress > Blocked > Code Review > QA > QA Sign Off > UAT > Done <br />
				- DB objects should be added to source control, by creating a DataBase project in Visual Studio <br />
				- Release branch should have some constrains so only the release manager person is the only person who can approve the changes <br />
				- Once you have a ticket, create a feature branch (feature/AS-1234) and start develop <br />
				- Once you finish > create Pull Request from your feature branch to develop branch <br />
				- Once merged to develop, the jenkins job for build and deploy will be auto-triggered to deploy to the QA environment <br />
				- Once we have the QA SignOff, merge between develop and release <br />
				- Once the merge done, it will trigger the jenkins job responsible to deploy to UAT <br />
				- Once deployed to UAT, the business team should validate the ticket <br />
				- Once we have the business team SignOff for all sprint tickets that will be included in the release, we run the jenkins job to deploy to prod from release branch <br />
				- Once the prod deployment done, the QA should run the regression test <br />
				- Once we have the prod SignOff, then merge from release to master and develop branches <br />
			</Data>
		</Item>
		<Item>
			<Title>
				C# memory management:
			</Title>
			<Data>
				C# employs automatic memory management which implemented by a <b>garbage collector</b>, The garbage collector checks to see if there are any objects in the heap that are no longer being used by the application. If such objects exist, then the memory used by these objects can be reclaimed. (If no more memory is available for the heap, then the new operator throws an OutOfMemoryException). <br />
				<b>The managed heap:</b> When an application calls the new operator to create an object, there may not be enough address space left in the region to allocate to the object. The heap detects this by adding the size of the new object to NextObjectPinter. If NextObjectPinter is beyond the end of the address space region, then the heap is full and a collection must be performed.
			</Data>
		</Item>
		<Item>
			<Title>
				Web Farm:
			</Title>
			<Data>
				is a group of two or more web servers (or nodes) that host multiple instances of an app. When requests from users arrive to a web farm, a load balancer distributes the requests to the web farm's nodes, so web farm improve Reliability/Availability, Capacity/Performance, Scalability, Maintainability
			</Data>
		</Item>
		<Item>
			<Title>
				CRM: stands for Customer Relationship Management,
			</Title>
			<Data>
				a CRM system allows businesses to manage business relationships and the data and information associated with them.
			</Data>
		</Item>
		<Item>
			<Title>
				CLI programming: CLI stands for Command Line Interface,
			</Title>
			<Data>
				Interpreter or Input which is a command line program that accepts text input to execute operating system functions.
			</Data>
		</Item>
		<Item>
			<Title>
				Micro services:
			</Title>
			<Data>
				is an architectural style that structures an application as a collection of services that are:
				Highly maintainable and testable, Loosely coupled, Independently deployable, Organized around business capabilities and
				Owned by a small team.
			</Data>
		</Item>
		<Item>
			<Title>
				Modularity:
			</Title>
			<Data>
				is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between client-side and server-side:
			</Title>
			<Data>
				the server side scripting involves server for its processing. ... The client-side script executes the code to the client side which is visible to the users while a server-side script is executed in the server end which users cannot see.
			</Data>
		</Item>
		<Item>
			<Title>
				Service Account
			</Title>
			<Data>
				is a user account that is created explicitly to provide a security context for services running on Windows Server operating systems. The security context determines the service's ability to access local and network resources. The Windows operating systems rely on services to run various features.
			</Data>
		</Item>
		<Item>
			<Title>
				Visual Studio CI/CD > Continuous Integration and Continuous Delivery:
			</Title>
			<Data>
				is a continuous delivery tool provided by TFS in visual studio which makes it simple to automate and stay up to date on your DevOps pipeline for ASP.NET and other projects targeting Azure.
			</Data>
		</Item>
		<Item>
			<Title>
				Jenkins:
			</Title>
			<Data>
				is a free and open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat.
			</Data>
		</Item>
		<Item>
			<Title>
				Rolling deployment
			</Title>
			<Data>
				allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources. <br></br>
				<b>Better to keep the app as stateless for rolling deployment</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Blue-green deployment
			</Title>
			<Data>
				is a technique that reduces downtime and risk by running two identical production environments called Blue and Green. At any time, only one of the environments is live, with the live environment serving all production traffic.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Ansible and Terraform and PowerShell:
			</Title>
			<Data>
				<b>Terraform</b> used to provision and configure infrastructure components, its written with (HCL) HashiCorp Configuration Language <br />
				<b>Ansible</b> used for deploy, install and manage the your application, its written with (YAML) <br />
				<b>PowerShell</b> is a Microsoft framework for automating tasks using a command-line shell and an associated scripting language. <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Docker:
			</Title>
			<Data>
				(developer share a copy of deployment server to tester to avoid issues because environment difference)
				is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.
			</Data>
		</Item>
		<Item>
			<Title>
				Kubernates:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Relational and non-relational databases:
			</Title>
			<Data>
				A relational database uses SQL (Structured Query Language) which storing data using tables, columns and rows but the non-relational databases (NoSQL) are document-oriented. Instead of using tables, these documents allow us to store unstructured JSON data in a single document.
			</Data>
		</Item>
		<Item>
			<Title>
				How does the internet work:
			</Title>
			<Data>
				The Internet is made up of a massive network of specialized computers called routers. Each router's job is to know how to move packets along from their source to their destination. A packet will have moved through multiple routers during its journey. When a packet moves from one router to the next, it's called a hop.
			</Data>
		</Item>
		<Item>
			<Title>
				Task implementation steps:
			</Title>
			<Data>
				- Defining the problem clearly <br />
				- Breaking the problem down into small, simple parts <br />
				- Define the solution for each part of the problem <br />
				- Implementing the solution <br />
				- Making it efficient (eventually) <br />
			</Data>
		</Item>
		<Item>
			<Title>
				OLAP (Online Analytical Processing) queries:
			</Title>
			<Data>
				OLAP is a category of software that allows users to analyze information from multiple database systems at the same time. It is a technology that enables analysts to extract and view business data from different points of view. OLAP stands for Online Analytical Processing.
				Analysts frequently need to group, aggregate and join data. These operations in relational databases are resource intensive. With OLAP data can be pre-calculated and pre-aggregated, making analysis faster.
				OLAP databases are divided into one or more cubes. The cubes are designed in such a way that creating and viewing reports become easy.
			</Data>
		</Item>
		<Item>
			<Title>
				Basic distributed computing concepts:
			</Title>
			<Data>
				A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another
			</Data>
		</Item>
		<Item>
			<Title>
				Web Socket:
			</Title>
			<Data>
				a protocol enables interaction between a web browser (or other client application) and a web server with lower overhead, exchange messages between client and server
				in server use TcpListner and in client use WebSocket
			</Data>
		</Item>
		<Item>
			<Title>
				Serverless Computing:
			</Title>
			<Data>
				is a cloud-computing execution model in which the cloud provider runs the server, and dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity.
			</Data>
		</Item>
		<Item>
			<Title>
				Scalable systems:
			</Title>
			<Data>
				is a system that is able to maintain its effectiveness throughout even if there are additions or expansions in aspects such as resources or the number of end users without disrupting its functionality then it can be called a scalable system.
			</Data>
		</Item>
		<Item>
			<Title>
				A/B testing:
			</Title>
			<Data>
				also known as split testing or bucket testing, is a method of comparing two versions of a webpage or app against each other to determine which one performs better.
			</Data>
		</Item>
		<Item>
			<Title>
				Agile environment:
			</Title>
			<Data>
				a group of software development methodologies based on iterative development, where requirements and solutions evolve through collaboration between self-organizing cross-functional teams and Client/End user.
			</Data>
		</Item>
		<Item>
			<Title>
				Agile Scrum:
			</Title>
			<Data>
				is one of the implementations of agile methodology. In which incremental builds are delivered to the customer in every two to three weeks' time. it has a 3 key roles: Product Owner, Scrum Master, Development Team
				Sprint > EPIC > User Story > Feature > Task
				<b>* Every day a scrum meeting (stand-up meeting) for 15 minutes to discuss:</b> What’s done yesterday? What will be done today? What’s your obstacles?
				<b>Scrum Master</b> is the person who ensures that the team adheres to scrum theory, practices, and rules and protects the team by doing anything possible to help the team perform at the highest level. This may include removing impediments, facilitating meetings, and helping the Product Owner groom the backlog.
			</Data>
		</Item>
		<Item>
			<Title>
				Code Quality Factors:
			</Title>
			<Data>
				Code Reviews, Readability, Maintainability, Code Documentation, Best Practice coding, follow a consistent style, Unit Testing so it should be testable by building a good software structure with less coupling.
			</Data>
		</Item>
		<Item>
			<Title>
				Coding Standards:
			</Title>
			<Data>
				there are some tools like SonarLint and TSLint.
			</Data>
		</Item>
		<Item>
			<Title>
				SLA Service Level Agreement:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Quality Gates:
			</Title>
			<Data>
				Definitions for A Quality Gate is a special milestone in a software project Quality Gates are located before a phase that is strongly dependent on the outcome of a previous phase They are especially useful between phases.
				Formal sign-off and acceptance are mandatory at each gate.
				<b>Putting some measures to be checked after every phase of application. </b>
			</Data>
		</Item>
		<Item>
			<Title>
				CI/CD:
			</Title>
			<Data>
				CI (establish a consistent and automated way to build, package, and test applications, each change in code triggers an automated build-and-test sequence for the given project)
				CD (Package the build output files to deploy to server)
			</Data>
		</Item>
		<Item>
			<Title>
				CI/CD Pipelines:
			</Title>
			<Data>
				helps you automate steps in your software delivery process, such as initiating code builds, running automated tests, and deploying to a staging or production environment.
				Also you can inject another layers inside these steps like a layer for checking coding style
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between bat and powershell scripts:
			</Title>
			<Data>
				Batch files are generally executed by CMD.exe; PowerShell is executed by PowerShell.exe.
				PowerShell includes extra features and commands that aren't in cmd.exe
			</Data>
		</Item>
		<Item>
			<Title>
				Regression Test:
			</Title>
			<Data>
				A test that was written when a bug was fixed. It ensures that this specific bug will not occur again.
			</Data>
		</Item>
		<Item>
			<Title>
				Sanity Test:
			</Title>
			<Data>
				is done to check the new functionality/bugs have been fixed
			</Data>
		</Item>
		<Item>
			<Title>
				Integration Test:
			</Title>
			<Data>
				Test the correct inter-operation of multiple subsystems. There is whole spectrum there, from testing integration between two classes, to testing integration with the production environment.
			</Data>
		</Item>
		<Item>
			<Title>
				Smoke Test:
			</Title>
			<Data>
				also known as “Build Verification Testing”, is a type of software testing that comprises of a non-exhaustive set of tests that aim at ensuring that the most important functions work. The result of this testing is used to decide if a build is stable enough to proceed with further testing.
			</Data>
		</Item>
		<Item>
			<Title>
				Testing Pyramid (higher to lower cost)
			</Title>
			<Data>
				..........UI <br />
				.....Service(API) <br />
				.Unit Test (smaller components)
			</Data>
		</Item>
		<Item>
			<Title>
				Code Smell
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Advantages of ORM:
			</Title>
			<Data>
				reduce query repetition, take the benefit of OOP to build a maintainable code
			</Data>
		</Item>
		<Item>
			<Title>
				DisAdvantages of ORM:
			</Title>
			<Data>
				performance
			</Data>
		</Item>
		<Item>
			<Title>
				Syntactic Sugar:
			</Title>
			<Data>
				means that the new features of the language are not really new. Instead, they are a nicer syntax for something existing/ You could do exactly the same by writing something different in the old version. ... Anything which is simplified is a syntactic sugar.
			</Data>
		</Item>
		<Item>
			<Title>
				Cross-site request forgery (CSRF):
			</Title>
			<Data>
				also known as one-click attack or session riding and abbreviated as CSRF, is a type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts.
				There are many ways in which a malicious website can transmit such commands; specially-crafted image tags, hidden forms, and JavaScript XMLHttpRequests, for example, can all work without the user's interaction or even knowledge. Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser.<br />
				<b>To prevent CSRF: inject an authentication token in every request to be validated in middleware</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Cross-Site Scripting (XSS) Attacks:
			</Title>
			<Data>
				are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.
			</Data>
		</Item>
		<Item>
			<Title>
				Hadoop:
			</Title>
			<Data>
				is a software technology designed for storing and processing large volumes of data distributed across a cluster of commodity servers and commodity storage.
			</Data>
		</Item>
		<Item>
			<Title>
				Rabbit MQ and MSMQ:
			</Title>
			<Data>
				<b>Rabbit MQ</b> gave slightly better performance than MSMQ, but both were comprehensively out performed by ZeroMQ. If performance is your main criteria, you should definitely look at ZeroMQ.
				<b>MSMQ:</b> is a simple store-and-forward queue. It doesn't provide any messaging patterns, such as pub/sub, or routing. For anything beyond simple point-to-point messaging you'd probably want to use a service bus library such as NServiceBus or MassTransit on top of MSMQ.
				<b>Rabbit MQ</b> is a sophisticated server product that provides complex messaging patterns, topics and routing out-of-the-box. You also get centralized management and DR, something you'd have to implement yourself if you chose MSMQ.
				<b>Rabbit MQ Workflow:</b><br/>
				> The producer publishes a message to the exchange. <br/>
				> The exchange receives the message and is now responsible for the routing of the message. <br/>
				> Binding must be set up between the queue and the exchange. In this case, we have bindings to two different queues from the exchange. <br/>
				> The exchange routes the message into the queues. The messages stay in the queue until they are handled by a consumer. <br/>
				> The consumer handles the message.
			</Data>
		</Item>
		<Item>
			<Title>
				Rabbit MQ Cluster:
			</Title>
			<Data>
				is a logical grouping of one or several nodes, each sharing users, virtual hosts, queues, exchanges, bindings, runtime parameters and other distributed state.
			</Data>
		</Item>
		<Item>
			<Title>
				Separation of Concern SOC:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Change-Advisory Board (CAB)
			</Title>
			<Data>delivers support to a change-management team by advising on requested changes, assisting in the assessment and prioritization of changes.</Data>
		</Item>
		<Item>
			<Title>
				Grooming (or refinement)
			</Title>
			<Data>
				is a meeting of the Scrum team in which the product backlog items are discussed and the next sprint planning is prepared.
			</Data>
		</Item>
		<Item>
			<Title>
				Data warehouses
			</Title>
			<Data>
				are used for analytical purposes and business reporting. Data warehouses typically store historical data by integrating copies of transaction data from disparate sources<br />
				<b>Data warehouse</b> is a system that stores data from a company's operational databases as well as external sources. Data warehouse platforms are different from operational databases because they store historical information, making it easier for business leaders to analyze data over a specific period of time.<br />
				<b>Also to enhance querying performance by reducing the number of records after moving the historical records to the warehousing DB</b>
			</Data>
		</Item>
		<Item>
			<Title>
				Mortgage Release
			</Title>
			<Data>
				is where you, the homeowner, voluntarily transfer the ownership of your property to the owner of your mortgage in exchange for a release from your mortgage loan and payments
			</Data>
		</Item>
		<Item>
			<Title>
				Data models
			</Title>
			<Data>
				define how data is connected to each other and how they are processed and stored inside the system.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Requests that responded live are Syncronous requests and the other are Asyncronous requests.
			</Data>
		</Item>
		<Item>
			<Title>
				Stateless Application
			</Title>
			<Data>
				is an application program that does not save client data generated in one session for use in the next session with that client. <br />
				<b>Stateful Application</b> saves data about each client session and uses that data the next time the client makes a request.
			</Data>
		</Item>
		<Item>
			<Title>
				SSO
			</Title>
			<Data>
				<img src="/images/sso.png" />
			</Data>
		</Item>
	</Section>
	<Section Title="HTML">
		<Item>
			<Title>
				DOM: (Document Object Model)
			</Title>
			<Data>
				represents the HTML document that is displayed in that window. The Document object has various properties that refer to other objects which allow access to and modification of document content.
			</Data>
		</Item>
		<Item>
			<Title>
				Web storage types (session storage and local storage) > difference:
			</Title>
			<Data>
				<code>window.localStorage</code>: stores data with no expiration date, data stored per origin (a combination of protocol, host name, and port number)<br/>
				<code>window.sessionStorage</code>: stores data for one session (data is lost when the browser tab is closed) <br/>
				* <b>so,</b> If you want to store a different data for the same app while open 2 tabs you should use session storage.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between UL and OL:
			</Title>
			<Data>
				UL means "unordered list". OL means "ordered list". UL gets you bullet points. OL gets you numbers
			</Data>
		</Item>
		<Item>
			<Title>
				How to group a form elements:
			</Title>
			<Data>
				Field set and Legend
			</Data>
		</Item>
		<Item>
			<Title>
				What is input types?
			</Title>
			<Data>
				Button, date, email, file, submit, radio, checkbox, etc…
			</Data>
		</Item>
		<Item>
			<Title>
				HTML5 tags:
			</Title>
			<Data>
				like article, footer, section, etc
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between .attr() and .prop():
			</Title>
			<Data>
				prop has no value (checked, disabled, etc...)
				Attributes are physical written in HTML but properties not
			</Data>
		</Item>
		<Item>
			<Title>
				XHTML:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XSL:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XSLT:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				XPath and XQuery:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				we can transform (XML and XSL\XSLT) to XHTML in client side using JS or in server side
			</Data>
		</Item>
	</Section>
	<Section Title="CSS">
		<Item>
			<Title>
				Bootstrap:
			</Title>
			<Data>
				is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and JavaScript-based design templates for typography, forms, buttons, navigation and other interface components.
			</Data>
		</Item>
		<Item>
			<Title>
				What’s the difference between display: block, inline and inline-block:
			</Title>
			<Data>
				display: inline-block allows to set a width and height on the element. Also, with display: inline-block , the top and bottom margins/paddings are respected, but with display: inline they are not.
			</Data>
		</Item>
		<Item>
			<Title>
				What is the different ways to apply CSS on element:
			</Title>
			<Data>
				Inline, Internal (in style tag) or External
			</Data>
		</Item>
		<Item>
			<Title>
				CSS selectors:
			</Title>
			<Data>
				https://www.w3schools.com/cssref/css_selectors.asp
			</Data>
		</Item>
		<Item>
			<Title>
				How select the last child of an element:
			</Title>
			<Data>
				<code>element > *:last-child {}</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How select nth child of an element: element:
			</Title>
			<Data>
				<code>nth-child(n)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				CSS Coloring: (color name, HEX color and RGB)
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				What is new in CSS3:
			</Title>
			<Data>
				Selectors: can use regular expressions formula (^ starts with, $ ends with, * contains, etc...) <br />
				Rounded Corners and Border Image: using border-radius and border-image <br />
				Box Shadow and Text Shadow: using box-shadow and text-shadow <br />
				RGPA colors with opacity.
			</Data>
		</Item>
	</Section>
	<Section Title="JavaScript and JQuery">
		<Item>
			<Title>
				Syntax of document ready, what is the different ways?
			</Title>
			<Data>
				<code> $(document).ready(function(){});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to get\set element text\html:
			</Title>
			<Data>
				<code> .text() .html()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Document Ready Event in JS:
			</Title>
			<Data>
				<code> document.addEventListener("DOMContentLoaded", function () {});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Array.map() and Array.forEach:
			</Title>
			<Data>
				<code>arr.forEach((item, index) => {return item++});</code>
				<code>forEach()</code> changes the original array, whereas <code>map()</code> returns a new array, without mutating the original array.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Javascript has only one thread but the browser has many
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can stop <code>var xx = setInterval(fun(), interval)</code> by <code>clearInterval(xx);</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What’s the different ways to bind event on HTML element:
			</Title>
			<Data>
				<b>JS:</b> <code>element.addEventListener(event, function, useCapture);</code> <br />
				<b>JQ:</b> <code>$(element).eventName(function(){});</code> or <code>$(element).on(“eventName”, function(){});</code> so the difference is <code>on()</code> is binding event to element dynamically using below:
				<code>$(parentElement).on(‘eventName’, ‘dynamicElemnt’, function(){});</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between bind() * live():
			</Title>
			<Data>
				<code>bind()</code> attachs events to elements that exist or match the selector at the time the call is made. Any elements created afterwards or that match going forward because the class was changed, will not fire the bound event. <br />
				<code>.live()</code> works for existing and future matching elements.
			</Data>
		</Item>
		<Item>
			<Title>
				JQ effects methods:
			</Title>
			<Data>
				<code>animate(), fadein(), fadeout()</code>, etc..
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between parent(), children() and siblings():
			</Title>
			<Data>
				Siblings: are all elements in the same level and same parent
			</Data>
		</Item>
		<Item>
			<Title>
				DOM Model:
			</Title>
			<Data>
				is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between null and undefined:
			</Title>
			<Data>
				undefined means a variable has been declared but has not yet been assigned a value. On the other hand, null is an assignment value.
			</Data>
		</Item>
		<Item>
			<Title>
				Browser Indexed DB:
			</Title>
			<Data>
				is a new HTML5 concept to store the data inside user's browser. indexeddb is more power than local storage and useful for applications that requires to store large amount of the data.
				> It stores key-pair values > It is not a relational database > IndexedDB API is mostly asynchronous > it is not a structured query language > it has supported to access the data from same domain
			</Data>
		</Item>
		<Item>
			<Title>
				Abort Controller:
			</Title>
			<Data>
				interface represents a controller object that allows you to abort one or more Web requests as and when desired.
				const abortController = new AbortController();
				abortController.abort();
			</Data>
		</Item>
		<Item>
			<Title>
				Prototypal Inheritance in JS:
			</Title>
			<Data>
				Each object has a private property which holds a link to another object called its prototype.<br />
				<code>
					function Person(first, last, age, eyecolor) { <br />
					this.firstName = first;<br />
					this.lastName = last;<br />
					}<br />
					Person.prototype.nationality = "English";<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to remove binding from element:
			</Title>
			<Data>
				<b>JS:</b> element. detachEvent(); <br />
				<b>JQ:</b> $(element).unbind(“event name”);
			</Data>
		</Item>
		<Item>
			<Title>
				What is preventDefault():
			</Title>
			<Data>
				it cancels the event’s default behavior if it is cancelable, meaning that the default action that belongs to the event will not occur.
			</Data>
		</Item>
		<Item>
			<Title>
				How to remove an element from DOM:
			</Title>
			<Data>
				<code>$(element). remove();</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to add\remove class from element:
			</Title>
			<Data>
				<code>$(element). addClass().removeClass();</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Keyboard events:
			</Title>
			<Data>
				<code>keyup()</code> – Fire when user releases a key on the keyboard.<br />
				<code>keydown()</code> – Fire when user presses a key on the keyboard.<br />
				<code>keypress()</code> – Fire when user presses a key on the keyboard.<br />
				Keypress respects case sensitivity when accessing char ASCII code
			</Data>
		</Item>
		<Item>
			<Title>
				Keyboard events:
			</Title>
			<Data>
				<code>keyup()</code> – Fire when user releases a key on the keyboard.<br />
				<code>keydown()</code> – Fire when user presses a key on the keyboard.<br />
				<code>keypress()</code> – Fire when user presses a key on the keyboard.<br />
				<b>Keypress respects case sensitivity when accessing char ASCII code</b>
			</Data>
		</Item>
		<Item>
			<Title>
				String operations:
			</Title>
			<Data>
				JS:<code> length, indexOf(‘xx’), indexOf(‘xx’, startIndex), lastIndexOf(‘xx’), search(‘xx’)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is array.slice():
			</Title>
			<Data>
				returns the selected elements in an array, as a new array object.
			</Data>
		</Item>
		<Item>
			<Title>
				How to apply styles on element using JQuery:
			</Title>
			<Data>
				<code>.css()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Best performance of JS Loops:  a standard for loop with length caching:
			</Title>
			<Data>
				<code>
					for (var i = 0, len = myArray.length; i less than len; i++) { <br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Comments:
			</Title>
			<Data>
				<code>
					// /* */
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Inheritance in JS:
			</Title>
			<Data>
				<code>
					using prototype
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Regular Expressions:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				JavaScript ecosystem:
			</Title>
			<Data>
				is a collection of software packages, libraries, and other resources that facilitate development as they integrate with each other.<br />
				Those tools are created by different developers and providers <br />
				– for example, the React library is powered by Facebook, while the Angular framework was created by Google, and Vue.js was designed by an independent developer.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between var, let and const:
			</Title>
			<Data>
				<code>var</code> can be updated and re-declared within its scope; <br />
				<code>let</code> can be updated but not re-declared; <br />
				<code>const</code> can neither be updated nor re-declared. <br />
				They are all hoisted to the top of their scope but while var variables are initialized with undefined, let and const variables are not initialized.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Bind, Call and Apply:
			</Title>
			<Data>
				all of it to invoke a function, use <code>.call()</code> or <code>.apply()</code> when you want to invoke the function immediately, and modify the context. <code>call()/apply()</code> call the function immediately, whereas <code>bind()</code> returns a function that, when later executed, will have the correct context set for calling the original function.<br />
				<code>
					var person1 = {name: 'Marvin', age: 42, size: '2xM'}; <br/>
					var sayHello = function(){<br/>
					alert('Hello, ' + this.name);<br/>
					};<br/>
					sayHello.call(person1);<br/>
					sayHello.apply(person1);<br/>
				</code>
				* the 1st parameter should be the scope object (this)<br/>
				* What if you need to pass parameters to the function while invoking it you should use <code>.call()</code> but if you have many parameters (arguments) then you should use .apply() because it expects the 2nd parameter as array of arguments.
			</Data>
		</Item>
		<Item>
			<Title>
				Implicit and Explicit binding:
			</Title>
			<Data>
				Implicit when this keyword presented inside code but Explicit when this keyword explicitly passed by <code>.call()</code>, <code>.apply()</code> or <code>.bind()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				This and Context:
			</Title>
			<Data>
				this is just the current context (caller)
			</Data>
		</Item>
		<Item>
			<Title>
				Strict mode:
			</Title>
			<Data>
				introduced in ES5, it throws reference error when using variable before declaring it.
			</Data>
		</Item>
		<Item>
			<Title>
				Variable scope in JS:
			</Title>
			<Data>
				JavaScript has two scopes – global and local. Any variable declared outside of a function belongs to the global scope, and is therefore accessible from anywhere in your code. Each function has its own scope, and any variable declared within that function is only accessible from that function and any nested functions.
			</Data>
		</Item>
		<Item>
			<Title>
				Event delegation in JS:
			</Title>
			<Data>
				is adding event listener to parent element instead of adding to every child and inside this event using <code>event.target</code> you can detect which child who fired the event.<br />
				And using <code>event.currentTarget</code> to access the parent element
			</Data>
		</Item>
		<Item>
			<Title>
				Event propagation:
			</Title>
			<Data>
				is a mechanism that defines how events propagate or travel through the DOM tree to arrive at its target and what happens to it afterward. <br />
				* when you have a nested element(s) which assigned the same event (ex, click) so when you click on any one the other events fire so <code> event.stopPropagation()</code> will stop propagating event to other elements.<br />
				> It has 2 types:<br />
				<b>Capturing:</b> Spreading event inside. <br/>
				<b>Bubbling:</b> Spreading event outside.
			</Data>
		</Item>
		<Item>
			<Title>
				Event propagation:
			</Title>
			<Data>
				is a mechanism that defines how events propagate or travel through the DOM tree to arrive at its target and what happens to it afterward. <br />
				* when you have a nested element(s) which assigned the same event (ex, click) so when you click on any one the other events fire so <code> event.stopPropagation()</code> will stop propagating event to other elements.<br />
				> It has 2 types:<br />
				<b>Capturing:</b> Spreading event inside. <br/>
				<b>Bubbling:</b> Spreading event outside.
			</Data>
		</Item>
		<Item>
			<Title>
				How many 8-bit in text to be stored in Utf-8?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				When shouldn’t use arrow function:
			</Title>
			<Data>when you want to access something from this (caller)</Data>
		</Item>
		<Item>
			<Title>
				Difference between Reference Error and Undefined:
			</Title>
			<Data>in ES6 when using undeclared variable it will throw reference error but in earlier versions of JS will output undefined</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>any undeclared variable (without var keyword) becomes global</Data>
		</Item>
		<Item>
			<Title>
				JS Versions and difference:
			</Title>
			<Data>ES Standard, ES2015, ES6 and ES Next</Data>
		</Item>
		<Item>
			<Title>
				Let keyword:
			</Title>
			<Data>
				make the variable block scope not function scope, if you defined var inside loop it will be accessible to its function but let wont be. <br />
				<code>
					var x = function(){<br/>
					for(var x = 0; x less than 2; x++){<br />
					let y = 4;<br />
					}<br />
					console.log(y);<br />
					}
				</code><br />
				if you run x() >> output : ReferenceError: y is not defined <br />
				but if you use var instead of let >> output : 4
			</Data>
		</Item>
		<Item>
			<Title>
				Immutable Variables:
			</Title>
			<Data>
				are variables whose value cannot be modified once assigned (const)
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between function declaration and function expression:
			</Title>
			<Data>
				Function declaration like <code>function foo(){ … }</code><br />
				Function expression like <code>var foo = function(){ … }</code> <br />
				* Function declaration is hoisted but expression isn’t.
			</Data>
		</Item>
		<Item>
			<Title>
				Ternary operator (? and :)
			</Title>
			<Data>
				like this condition <code> ? true : false</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Null Conditional Operator:
			</Title>
			<Data>
				<code>object?.property ?? defaultvalue</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can dynamically validate function parameters using arguments keyword
			</Data>
		</Item>
		<Item>
			<Title>
				DOM reflow:
			</Title>
			<Data>
				a web browser process for re-calculating the positions and geometries of elements in the document, for the purpose of re-rendering part or all of the document.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				let and const are not hoisted because it provide a block scope
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				string can be converted to number by putting + before it: <code>var x = ‘23’;   var y = +x; // 23</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can convert number to string by putting ‘’ + befor it: <code>var x = 23;   var y = ‘’ + x; // “23”</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Caching Client Side:
			</Title>
			<Data>
				Caching is used for web performance optimization since the configuration and server connectivity data are usually stored in Cookies but the popular data in web storage (sessionStorage and localStorage) <br />
				<b>Cookie:</b> (Cookies are data, stored in small text files, on your computer) stores data that has to be sent back to the server with subsequent requests.<br />
				There are some libraries used in caching: Modenizr and Redis
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				<code>
					let x = 0, isTrue = false; <br />
					if(x) isTrue = true;
				</code> >> still false
			</Data>
		</Item>
		<Item>
			<Title>
				Syntactic Sugar:
			</Title>
			<Data>
				is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Closure in JS:
			</Title>
			<Data>
				means writing a nested functions in which Inner function can access variables and parameters of an outer function (however, cannot access arguments object of outer function)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				instead of using callback to handle response and error, you can use promises by <code>.then(handleResponseFnc).catch(handleErrorFnc)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Promises in JS:
			</Title>
			<Data>
				The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value, it has 3 states: <br />
				Pending: initial state, neither fulfilled nor rejected.<br />
				Fulfilled: meaning that the operation completed successfully.<br />
				Rejected: meaning that the operation failed.<br />
				<code>
					const myPromise = (new Promise(myExecutorFunc)).then(handleFulfilledA,handleRejectedA)<br />
					.then(handleFulfilledB,handleRejectedB)<br />
					.then(handleFulfilledC,handleRejectedC);
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between promises.All and promises.Each:
			</Title>
			<Data>
				The <code>Promise.all()</code> method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises or when the iterable contains promises that have been fulfilled and non-promises that have been returned. It rejects with the reason of the first promise that rejects, or with the error caught by the first argument if that argument has caught an error inside it using <code>try/catch/throw</code> blocks. <br />
				<code>
					const promise1 = Promise.resolve(3); <br />
					const promise2 = 42; <br />
					const promise3 = new Promise((resolve, reject) => { <br />
					setTimeout(resolve, 100, 'foo'); <br />
					}); <br />
					Promise.all([promise1, promise2, promise3]).then((values) => { <br />
					console.log(values); <br />
					});
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is Async and Await :
			</Title>
			<Data>
				async/await simply gives you a synchronous feel to asynchronous code. It's a very elegant form of syntactical sugar, it require a transpiler to be read be browser (babel).<br />
				<b>await:</b> block code execution until finish it, and it should be used if the next step depends on the previous operation result.<br />
				<code>
					while (!value) {<br />
					const intermediate = await operation1();<br />
					value = await operation2(intermediate);<br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Marking function as async makes it also return a promise. This is done automatically for you, so you don't need to return a promise explicitly.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				the await keyword is only valid inside async functions
			</Data>
		</Item>
		<Item>
			<Title>
				What is Array.reduce :
			</Title>
			<Data>
				used to reduce the array to a single value and executes a provided function for each value of the array (from left-to-right) and the return value of the function is stored in an accumulator.<br />
				<code>array.reduce( function(accumulator, currentValue, currentIndex, arr), initialValue )</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is the output of the below code: How setTimeout function works ?
			</Title>
			<Data>
				<code>
					for( I = 0; I leth than 5; i++){<br />
					setTimeout( ()=>{console.log(i)});<br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				use string literal (`) to avoid conflicts of single\double quotes of string and to bind a value of variable inside string
				<code>
					var x = 3;<br />
					var y = `this is x = ${x}’;
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Bugsnag:
			</Title>
			<Data>
				Error Monitoring and Reporting Tool for App Stability
			</Data>
		</Item>
		<Item>
			<Title>
				Sentry:
			</Title>
			<Data>
				Used to capture Javascript errors
			</Data>
		</Item>
		<Item>
			<Title>
				HotJar:
			</Title>
			<Data>
				Monitor and fix the UX errors of your application.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between event target and currentTarget :
			</Title>
			<Data>
				target is the element that triggered the event (e.g., the user clicked on) currentTarget is the element that the event listener is attached to.
			</Data>
		</Item>
		<Item>
			<Title>
				How to authenticate API from frontend:
			</Title>
			<Data>
				Using JWT to be sent in every request header, a JWT is a token that is issued by the server. The token has a JSON payload that contains information specific to the user. This token can be used by clients when talking to APIs (by sending it along as an HTTP header) so that the APIs can identify the user represented by the token, and take user specific action.<br />
				The JWT needs to be stored inside an httpOnly cookie, a special kind of cookie that’s only sent in HTTP requests to the server
			</Data>
		</Item>
		<Item>
			<Title>
				JWT (JSON Web Token):
			</Title>
			<Data>
				way for securely transmitting information between parties as a base64 encoded JSON object, consist of three parts separated by dots (header.payload.signature) <br />
				So Header contains the algorithm name and type (JWT)  <br />
				Payload contains some useful data (user claims) like iss (issuer), exp (expiration time), sub (subject), aud (audience), and others. <br />
				Signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is. <br />
				> A JWT is not encrypted. It is based64 encoded and signed. So anyone can decode the token and use its data.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Selenium Testing:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is End To End Testing:
			</Title>
			<Data>
				The entire application is tested for critical functionalities such as communicating with the other systems, interfaces, database, network, and other applications.
			</Data>
		</Item>
		<Item>
			<Title>
				Functional Programming:
			</Title>
			<Data>
				define the problem as a small functions that its output depend on the parameters .. <br />
				it acheives modularity and may be related to Business Rule Engine (BRE) => may be :D
			</Data>
		</Item>
		<Item>
			<Title>
				Reactive Programming (RP):
			</Title>
			<Data>
				(is programming with asynchronous data streams), (It is an Asynchronous Programming concept around data streams.), (is writing code that define how to react to changes) and (is a programming paradigm oriented around data flows and the propagation of change.) <br/>
				<code>
					var x = 10; <br/>
					var y = 20; <br/>
					let z = x + y; <br/>
					console.log(z);<br/>
					x = 100;<br/>
					y = 200; <br/>
					console.log(z);
				</code><br/>
				So here the variable Z will not be changed and RP is to write code that define how to react to changes by definining data\code as streams:<br />
				import {Observable} from 'rxjs-es'; Using Observable represented in RXJS and to subscribe to specific variables.<br />
				> Both promise and observables are built to solve problems around async (to avoid “callback hell”).<br />
				> An observer is object literal with <code>next()</code>, <code>error()</code> and <code>complete()</code> functions. In the above example, the observer is the object literal we pass into our <code>.subscribe()</code> method.
			</Data>
		</Item>
		<Item>
			<Title>
				Callback Hell:
			</Title>
			<Data>
				is having a lot of nested callback functions, Each inner callback is dependent on its parent (code becomes obscure or difficult to follow.)<br />
				So promises and observable (RXJS) fixed this problem.
			</Data>
		</Item>
		<Item>
			<Title>
				RXJS (Reactive Extensions for JavaScript):
			</Title>
			<Data>
				is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code.
			</Data>
		</Item>
		<Item>
			<Title>
				ErrorFirst Callback:
			</Title>
			<Data>
				is simply structuring the callback function by writing the first argument\parameter as error object and the subsequent arguments represent associated data.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Hoisting:
			</Title>
			<Data>
				is moving variables and functions declarations (not initializations) to the top of their scope before code execution, hoisting has order while topping up > variable assignment, function declaration then variable declaration
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between variable hoisting and function hoisting:
			</Title>
			<Data>
				Unlike variables, a function declaration doesn't just hoist the function's name. It also hoists the actual function definition. <br />
				As you can see, the JavaScript interpreter allows you to use the function before the point at which it was declared in the source code.
			</Data>
		</Item>
	</Section>
	<Section Title="Typescript">
		<Item>
			<Title>
				A clear difference between ECMA Script 5 and 6?
			</Title>
			<Data>
				ES6 added some features to ES5 like const, let , etc…
			</Data>
		</Item>
		<Item>
			<Title>
				Compilers\Transpilers to convert ECMA 6 to 5?
			</Title>
			<Data>
				yes
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Type (tsc -w) in terminal to switch on the auto-compile
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Type (tsc --init) to add tsconfig.ts to project and configure (compileOnSave )
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				use enums in static variables grouping
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Use Tuple to create an array with a static different types.
			</Data>
		</Item>
		<Item>
			<Title>
				What is strict mode:
			</Title>
			<Data>
				a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This strict context prevents certain actions from being taken and throws more exceptions.
			</Data>
		</Item>
		<Item>
			<Title>
				Why you prefer writing Typescript rather than Javascript?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Always use let (controls the local scope of variable)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Variable local\global scope (When use declaration, it will be local)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Block scope is simply writing a code inside {}
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Variable local\global scope (When use declaration, it will be local)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Block scope is simply writing a code inside {}
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Variable local\global scope (When use declaration, it will be local)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				You can set readonly variable only in initialization or constructor, so the difference between Const and readonly is that you can’t initialize const without setting a value but readonly is applicable and set its value in constructor
			</Data>
		</Item>
		<Item>
			<Title>
				Arrow Function:
			</Title>
			<Data>
				Lambda expression in Typescript: <br /> <code>let Do = function (a, b){ return a*b}    let Do = (a, b) => (a*b)</code> <br />
				Most important advantage of arrow function doesn’t bind to this
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between == and ===:
			</Title>
			<Data>
				== compare value but === compare both value and type
			</Data>
		</Item>
		<Item>
			<Title>
				Spread and rest operator:
			</Title>
			<Data>
				to spread array items (ex. array spread by ...arr) <br />
				<code>
					function showName(firstName, lastName, ...titles) { <br />
					alert( firstName + ' ' + lastName ); // Julius Caesar <br />
					alert( titles[0] ); // Consul <br />
					alert( titles[1] ); // Imperator <br />
					alert( titles.length ); // 2 <br />
					} <br />
					showName("Julius", "Caesar", "Consul", "Imperator");
				</code> <br />
				The ...rest parameter (titles) must always be last one.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Immediately invoked function expression (IFIE Module) to define function and call it in same time, <br />
				also used to control conflicts if some var name duplicated in 2 JS files: ex: <code>(function(){ //do something}());</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				=> is abbreviation for (go through)
			</Data>
		</Item>
		<Item>
			<Title>
				Typescript mixed data type:
			</Title>
			<Data>
				<code>(ex. let x: number|string)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Typescript type alias:
			</Title>
			<Data>
				<code>(ex. type int = number; let y: int)</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Revealing Module Pattern:
			</Title>
			<Data>
				(every JS file is standalone (using export and import))
			</Data>
		</Item>
		<Item>
			<Title>
				Use (System JS):
			</Title>
			<Data>
				as module loader to import a JS file inside HTML file.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				To run a .ts file using node, use command (node filename.ts)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				You can create a Typescript project from Visual Studio (HTML Application with Typescript)
			</Data>
		</Item>
		<Item>
			<Title>
				Decorator:
			</Title>
			<Data>
				adding another fields\properties to a class without editing its code or inheritance using <br />
				<code>thatClass.prototype.newProperty = something</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Loop through array by for (<code>let n in array</code>) to access index OR for (<code>let n of array</code>) to access object itself
			</Data>
		</Item>
	</Section>
	<Section Title="React.JS">
		<Item>
			<Title>
				Difference between function component and class component:
			</Title>
			<Data>
				Function component preferred to be used when this component has no user interactions
			</Data>
		</Item>
		<Item>
			<Title>
				What is React mountNode:
			</Title>
			<Data>
				is a DOM node which you are telling ReactDOM to render the component into.
			</Data>
		</Item>
		<Item>
			<Title>
				React rendering in server side : (so the search engines can fetch and index all application pages)
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Styled Components:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				JSX:
			</Title>
			<Data>
				(JavaScript Syntax XML) is writing JS code inside HTML.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				You can simulate a response data by using website (https://jsonplaceholder.typicode.com)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				When you pass a props to a component, you should define this props like below: <br />
				<code>class X extends Component (any, any="")   // at least use any data type</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				you can’t use setState in constructor, just use <code> this.state.x = value;</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is Props:
			</Title>
			<Data>
				Props is the shorthand for Properties in React. They are read-only components which must be kept pure i.e. immutable.<br />
				They are always passed down from the parent to the child components throughout the application. A child component can never send a prop back to the parent component. This help in maintaining the unidirectional data flow and are generally used to render the dynamically generated data.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				To install React Router > npm install --save react-router
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between NPM and NPX:
			</Title>
			<Data>
				NPX makes it easy to install and manage dependencies hosted in npm registry. It simplifies the process and provides a better for executables.
			</Data>
		</Item>
		<Item>
			<Title>
				TS Webpack, Babel and Gulp:
			</Title>
			<Data>
				<b>TS Webpack:</b> is a tool that will bundle your code and optionally all of its dependencies into a single .js file <br />
				<b>TS Babel:</b> used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments <br />
				<b>TS Gulp:</b> is a cross-platform, streaming task runner that lets developers automate many development tasks.
			</Data>
		</Item>
		<Item>
			<Title>
				Webpack installation:
			</Title>
			<Data>
				- move index.html from build to src <br />
				- install all required modules?? <br />
				- use HashRouter <br />
				- in tsconfig > remove "noEmit" and set "jsx" to "React"
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				componentDidMount will fire after componentWillReceiveProps as well
			</Data>
		</Item>
		<Item>
			<Title>
				React Virtual DOM:
			</Title>
			<Data>
				In React, for every DOM object, there is a corresponding “virtual DOM object.” A virtual DOM object is a representation of a DOM object (like a lightweight copy) which have also the same properties.
				So when you update some element in virtual DOM object it totally rerendered so react calculate the difference between the Real DOM and Virtual DOM and update only the changed objects into the Real DOM not all objects.
			</Data>
		</Item>
		<Item>
			<Title>
				Jest Unit Testing:
			</Title>
			<Data>
				<b>Jest</b> was created by Facebook and is a testing framework to test JavaScript and React code. <br />
				<b>Enzyme</b> is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output. Enzyme, created by Airbnb, adds some great additional utility methods for rendering a component (or multiple components), finding elements, and interacting with elements. Ex expect(element).toBe(value);
			</Data>
		</Item>
		<Item>
			<Title>
				React Life Cycle Methods:
			</Title>
			<Data>
				Constructor: to set up the initial state and other initial values. <br />
				Render: the method that actual outputs HTML to the DOM. <br />
				componentDidMount: method is called after the component is rendered; this is where you run statements that requires that the component is already placed in the DOM. <br />
				shouldComponentUpdate: method you can return a Boolean value that specifies whether React should continue with the rendering or not. <br />
				componentDidUpdate: method is called after the component is updated in the DOM. <br />
				componentWillUnmount: method is called when the component is about to be removed from the DOM.
			</Data>
		</Item>
		<Item>
			<Title>
				How React state works?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is subscribe?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				When you should unsubscribe?
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				What is the property (key) is used for in React:
			</Title>
			<Data>
				Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside a repeater.
			</Data>
		</Item>
		<Item>
			<Title>
				Refs:
			</Title>
			<Data>
				is the short hand for References in React. It is an attribute which helps to store a reference to a particular React element or component, which will be returned by the components render configuration function. <br />
				It is used to return references to a particular element or component returned by render(). <br />
				They come in handy when we need DOM measurements or to add methods to the components.<code> start input ref=""{snap =""> this.Snaps.inputUserName = snap} /> </code> <br />
				there are some instances when using Refs is useful, such as: <br />
				Managing focus, text selection, or media playback. <br />
				Triggering imperative animations. <br />
				Integrating with third-party DOM libraries.
			</Data>
		</Item>
		<Item>
			<Title>
				What is React Context:
			</Title>
			<Data>
				data is passed top-down (parent to child) via props, Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.
				<code>const MyContext = React.createContext();</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between state and props:
			</Title>
			<Data>
				state is mutable but props are immutable,
				props are variables passed to it by its parent component. State on the other hand is still variables, but directly initialized and managed by the component. The state can be initialized by props.
			</Data>
		</Item>
		<Item>
			<Title>
				Why is switch keyword used in React Router v4?
			</Title>
			<Data>
				The <switch></switch> tag when in use matches the typed URL with the defined routes in sequential order. When the first match is found, it renders the specified route. Thereby bypassing the remaining routes.
			</Data>
		</Item>
		<Item>
			<Title>
				Is setState() async? Why?
			</Title>
			<Data>
				yes, it uses a callback function to fire after completely update state <code> this.setState({}, () => {});</code> <br />
				This is because setState alters the state and causes rerendering. This can be an expensive operation and making it synchronous might leave the browser unresponsive.
			</Data>
		</Item>
		<Item>
			<Title>
				React Hooks:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				React HOC:
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="Redux">
		<Item>
			<Title>
				Redux Definition:
			</Title>
			<Data>
				A centralized data store that all representational screen reads from : <br />
				1. Component > call an Action <br />
				2. Action > dispatch action so reducers can update state. <br />
				3. Reducer > make a new copy of state and return the new state (Immutability). <br />
				4. Store > after reducer update the state, the Store makes sure that all connected components are aware. <br />
				5. React-Redux > detect if there is state change and call react again. <br />
				6. React > if the UI depends on props updated by state, it will update the UI.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Redux is the most common React State Management Library, there is another libraries like Flux.
			</Data>
		</Item>
		<Item>
			<Title>
				Babel Transpiler:
			</Title>
			<Data>
				is used to convert from ES6 to ES5.
			</Data>
		</Item>
		<Item>
			<Title>
				WebPack:
			</Title>
			<Data>
				is used to compile\minify JS into browser.
			</Data>
		</Item>
		<Item>
			<Title>
				ESLint:
			</Title>
			<Data>
				is used to make a compile time checks on code to figure out the code mistakes
			</Data>
		</Item>
		<Item>
			<Title>
				Function Components:
			</Title>
			<Data>
				Use Stateless components when you don’t need (State, Refs, Lifecycle Methods and child functions).
			</Data>
		</Item>
		<Item>
			<Title>
				Dispatcher:
			</Title>
			<Data>
				is the method used to dispatch actions and trigger state changes to the store.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Redux has no Dispatcher because it has only one store.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Redux is all about 3 stages (Actions, Reducers and Store).
			</Data>
		</Item>
		<Item>
			<Title>
				Immutability:
			</Title>
			<Data>
				is instead of change object’s data return a new object, and on the other side (Mutable in JS like Objects, Arrays and Functions)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				I can handle Immutability using ES6 by (Object.assign or Spread Operator). <br />
				<code>var target = Object.assign(target, source);</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				To avoid Mutate state you can enforce Immutability over you project by including (redux-immutable-state-invariant) library to warn you when doing by mistake.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Redux and Flux are React workflow methods
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between mapStateToProps and mapDispatchToProps:
			</Title>
			<Data>
				mapStateToProps: used to connect the store state to component props (subscribe) <br />
				mapDispatchToProps: used to bind the action to props
			</Data>
		</Item>
		<Item>
			<Title>
				Redux Reducer:
			</Title>
			<Data>
				is a pure sync function that takes the previous state and an action, and returns the next state.
			</Data>
		</Item>
		<Item>
			<Title>
				Since you should use a pure functions in Reducers, How to call api call inside it (Async) :
			</Title>
			<Data>
				by using Action creators to make async calls and dispatch actions on completion of api call <code> (using .then(){ dispatch(…)} )</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Redux Observable:
			</Title>
			<Data>
				is an RxJS-based middleware for Redux that allows developers to work with async actions. <br /> It's an alternative to redux-thunk and redux-saga.
			</Data>
		</Item>
		<Item>
			<Title>
				How to structure store data\schema:
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="Ajax">
		<Item>
			<Title>
				Ajax:
			</Title>
			<Data>
				Asynchronous JavaScript And XML
			</Data>
		</Item>
		<Item>
			<Title>
				XHR:
			</Title>
			<Data>
				XML HTTP Request
			</Data>
		</Item>
		<Item>
			<Title>
				XHR onreadystatechange:
			</Title>
			<Data>
				fires 5 times with different values of readystate as below: <br />
				0 > Request not initialized  <br />
				1 > Server connection established <br />
				2 > Request received <br />
				3 > Processing request <br />
				4 > Request finished and response is ready
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Sync and ASync:
			</Title>
			<Data>
				Synchronously, in which the script stops and waits for the server to send back a reply before continuing. Asynchronously, in which the script allows the page to continue to be processed and handles the reply if and when it arrives.
			</Data>
		</Item>
		<Item>
			<Title>
				HTTP Request Headers:
			</Title>
			<Data>
				General: contains data like request url, method, status code, etc… <br />
				Request Header: data like connection (keep-alive), cookies, host, etc… <br />
				Response Header: data like Server, Cache-Control, Access-Control-Allow-Origin, etc…
			</Data>
		</Item>
		<Item>
			<Title>
				What is $.Ajax params:
			</Title>
			<Data>
				<code>method, url, data, cache(boolean), async(boolean), timeout(millisecond), success(data, status, xhr), error(xhr, status, errorMessage)</code> and <code>complete(xhr, status)</code> which run in both success and error states. <br />
				dataType: is the data type of response
				contentType: is the data type of request
			</Data>
		</Item>
		<Item>
			<Title>
				What is XHR params:
			</Title>
			<Data>
				<code>
					var xhttp = new XMLHttpRequest(); <br />
					xhttp.onreadystatechange = function() { <br />
					if (this.readyState == 4 and this.status == 200) { <br />
					console.log(xhttp.responseText); <br />
					} <br />
					}; <br />
					xhttp.open("GET", "filename", true); <br />
					xhttp.send(); <br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Web API and Web Service (asmx):
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Ajax Request = HTTP request
			</Data>
		</Item>
		<Item>
			<Title>
				HTTP call life cycle:
			</Title>
			<Data>
				1. First the browser needs to translate www.google.com to an IP address, it contacts a DNS server to resolve the name. <br />
				2. Then browser will open a TCP connection to the IP address of www.domain.com and send a HTTP GET request over. <br />
				3. The server software will get this HTTP request. It will somehow generate a HTTP response and send that back trough the TCP connection. (This is server software dependent). <br />
				4. When the browser gets the response, it typically renders it on screen. <br />
			</Data>
		</Item>
		<Item>
			<Title>
				JSON and XML:
			</Title>
			<Data>
				JSON (JavaScript Object Notation) is a lightweight data-interchange format and it completely language independent. ... Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				XML is much more difficult to parse than JSON.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				JSON is parsed into a ready-to-use JavaScript object.
			</Data>
		</Item>
		<Item>
			<Title>
				JSONP:
			</Title>
			<Data>
				is really a simple trick to overcome the XMLHttpRequest same domain policy, by calling url in script tag instead of making a XMLHttpRequest, so if we imagine this<br />
				<code>
					script = document.createElement('script');<br />
					script.type = 'text/javascript';<br />
					script.src = 'http://www.someWebApiServer.com/some-data';
				</code><br />
				will return this<br />
				script<br />
				{["some string 1", "some data", "whatever data"]}<br />
				script<br />
				So to be able to handle this response we path a callback parameter so the server will return data as below<br />
				script.src = 'http://www.someWebApiServer.com/some-data?callback=my_callback';<br />
				will return<br />
				script<br />
				my_callback({["some string 1", "some data", "whatever data"]});<br />
				script<br />
				so this is the JSONP is simply pass a callback parameter when calling api from script tag to overcome domain policy.<br />
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Cookies are commonly used to identify the same user across multiple HTTP requests, called sessions. Therefore these cookies are called session cookies.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Proxy:
			</Title>
			<Data>
				Implementing IHTTPHandler.
			</Data>
		</Item>
		<Item>
			<Title>
				HTTP Result Codes:
			</Title>
			<Data>
				1xx: Informational <br />
				2xx: Success <br />
				3xx: Redirection <br />
				4xx: Client Responsible Error (400 Bad Request, 401 Unauthorized, 404 Not Found and 405 Method Not Allowed) <br />
				5xx: Server Responsible Error (500 Internal Server Error) <br />
				https://restfulapi.net/http-status-codes/
			</Data>
		</Item>
	</Section>
	<Section Title="Web Service and Web API">
		<Item>
			<Title>
				Web service:
			</Title>
			<Data>
				typically offers a WSDL from which you can create client stubs automatically.
			</Data>
		</Item>
		<Item>
			<Title>
				Web Services:
			</Title>
			<Data>
				are based on the SOAP protocol.
			</Data>
		</Item>
		<Item>
			<Title>
				Web API:
			</Title>
			<Data>
				is a newer Microsoft framework which helps you to build REST based interfaces. <br />
				The response can be either JSON or XML, but there is no way to generate clients automatically because Web API does not offer a service description like the WSDL from Web Services.
			</Data>
		</Item>
		<Item>
			<Title>
				REST APIs:
			</Title>
			<Data>
				uses multiple standards like HTTP, JSON, URL, and XML while.<br />
				are more convenient with JavaScript and can be implemented easily as well.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Restful (Representational State Transfer) and Soap (Simple Object Access Protocol)
			</Data>
		</Item>
		<Item>
			<Title>
				SOAP APIs:
			</Title>
			<Data>
				is largely based on HTTP and XML.
			</Data>
		</Item>
		<Item>
			<Title>
				SOAP:
			</Title>
			<Data>
				is based on XML with meta data.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between MVC Controller and Web API Controller:
			</Title>
			<Data></Data>
		</Item>
	</Section>
	<Section Title="C#.NET and OOP">
		<Item>
			<Title>
				Concrete class:
			</Title>
			<Data>
				is a class that has an implementation for all of its methods
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Assembly > Namespace > Class > Props and Methods
			</Data>
		</Item>
		<Item>
			<Title>
				Class
			</Title>
			<Data>
				is a blue print that you create objects from, so that you define props in class and assign these props values while instantiating it (creating an object), and also you need to make this assignment in class constructor for the mandatory props so that you will defintly pass it when you create object.
			</Data>
		</Item>
		<Item>
			<Title>
				AssemblyInfo.cs
			</Title>
			<Data>
				is containing all data related to your assembly like Title, Desc, CopyRight, TradeMark and Version
			</Data>
		</Item>
		<Item>
			<Title>
				Reserved Bytes for data types:
			</Title>
			<Data>
				bool: 1, int: 4, string: 4, float: 4, double: 8, decimal: 16
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				By default the C# compiler treat number as double so to prevent this we can add a suffix (f) to the number like this float number = 12.45f;
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				If you have to inherit from BaseClass and interface you should put the BaseClass first like this public class ChildClass : BaseClass, IClass (not the oposite)
			</Data>
		</Item>
		<Item>
			<Title>
				How compiler deal with C# code?
			</Title>
			<Data>
				The C# compiler compiles the C# source code into the module, which is finally converted into the assembly. The assembly contains the Intermediate Language (IL) code along with the metadata information about the assembly.<br />
				The common language runtime (CLR) works with the assembly. It loads the assembly and converts it into the native code to execute the assembly.<br />
				Then this native code is executed by the Operating system and the output will shows according to your requirement.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Keep your code simple, and don't do over-engineering.
			</Data>
		</Item>
		<Item>
			<Title>
				Trusted Connection in Connection String
			</Title>
			<Data>
				If you specify either Trusted_Connection=True; or Integrated Security=SSPI; or Integrated Security=true; in your connection string THEN you have Windows Authentication happening. Any user id= setting in the connection string will be ignored
			</Data>
		</Item>
		<Item>
			<Title>
				Why using static keyword:
			</Title>
			<Data>
				means something which cannot be instantiated. You cannot create an object of a static class and cannot access static members using an object
			</Data>
		</Item>
		<Item>
			<Title>
				Data-Transfer-Object (DTO)
			</Title>
			<Data>
				is used to exchange data between different parts of an application <br />
				Domain objects (DO) can have logic (depending on whether you are using domain-driven design or have anemic data model) and they are usually related to the database structure.
			</Data>
		</Item>
		<Item>
			<Title>
				C# Extension method:
			</Title>
			<Data>
				allows you to add new methods in the existing class or in the structure without modifying the source code of the original type <br />
				* should be implemented in a static class and the method should have this as 1st parameter followed by class name and object (binding parameter)
			</Data>
		</Item>
		<Item>
			<Title>
				Lock keyword:
			</Title>
			<Data>
				(used in multithreaded applications to ensure that the current thread executes a block of code to completion without interruption by other threads.)
			</Data>
		</Item>
		<Item>
			<Title>
				.Net Sitecore:
			</Title>
			<Data>
				is a leading digital experience software used by organisations globally to create seamless, personalised digital experiences. Sitecore is an integrated platform powered by . net CMS, commerce and digital marketing tools.
			</Data>
		</Item>
		<Item>
			<Title>
				Mock object:
			</Title>
			<Data>
				(simulate the behavior of a real object)
			</Data>
		</Item>
		<Item>
			<Title>
				SonarLint:
			</Title>
			<Data>
				is a code analyzer.
			</Data>
		</Item>
		<Item>
			<Title>
				HTTP Handlers:
			</Title>
			<Data>
				When a client makes a request for a resource located on the server in an ASP.NET application, each request is handled by the HTTP Handlers. <br />
				It is an extension based processor and responsible for fulfilling requests from a browser depending on file extensions. When HttpHandler receives any request from browser, it checks the extension to see if it can handle that request and performs some predefined steps to respond that request. <br />
				So your custom HTTPHandler should implement 2 members of IHTTPHandler interface: <br />
				<b>ProcessRequest:</b>	Used to catch and fulfill your response of Http Requests. <br />
				<b>IsReusable:</b> To check the reusability of same instance handler with a new request of same type. <br />
				<code>start add verb="*" path="*.text" type=" ExampleHandler.Handlerclass, ExampleHandler "</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Big Data Types in .Net
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				.Net Core Middleware:
			</Title>
			<Data>
				is nothing but a component (class) which is executed on every request in ASP.NET Core application. In the classic ASP.NET, HttpHandlers and HttpModules were part of request pipeline. Middleware is like HttpHandlers and HttpModules where both needs to be configured and executed in each request.
				We can configure middleware in the Configure method of the Startup class using IApplicationBuilder instance.
				The request pipeline can have multiple middleware components (classes), Each middleware component in the request pipeline is responsible for invoking the next component in the pipeline.
			</Data>
		</Item>
		<Item>
			<Title>
				What is OOP and 4 concepts:
			</Title>
			<Data>
				OOP is a way of writing computer programs using the idea of "objects" to represent data and methods. <br />
				<b>Inheritance:</b> a class can “inherit” the characteristics of another general class. <br />
				<b>Abstraction:</b> (pure class for deneric purpose) define some common behavior that can be inherited by multiple subclasses, without implementing the entire class. <br />
				<b>Encapsulation:</b> binds the member function and data member into a single class <br />
				<b>Polymorphism:</b> This is the ability of an object to perform in a wide variety of ways, it has 2 types: <br />
				- <b>Dynamic polymorphism</b> (runtime time) > overriding (allows a subclass to override a specific implementation of a method already issued by one of its super-classes) <br />
				- <b>Static polymorphism</b> (compile time) > overloading (defining several methods at the same time with the same method name but different in number, type or order of parameters)
			</Data>
		</Item>
		<Item>
			<Title>
				Interface:
			</Title>
			<Data>
				is a collection of abstract methods and doesn’t have constructor
			</Data>
		</Item>
		<Item>
			<Title>
				Simple definition for Interface:
			</Title>
			<Data>
				for example the company needs a Developer with a specific skills Not need (Mohamed) so in any time the company may replace Mohamed with any other Developer that has these skills so the Interface here is the Developer Skills as a Contract.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Interface objects should not have access modifiers in signature, just return type, name and parameters
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				the class that implement interface should have the implemented methods as public
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				static class should not have a constructor because it cannot be instantiated.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				override keyword is used in either implementing a abstract method in the base class or overriding a method in base class that has virtual in its signature.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				No difference between Person person1 = new Person{ Name = ""}; AND Person person1 = new Person(){ Name = ""};
			</Data>
		</Item>
		<Item>
			<Title>
				Overloading
			</Title>
			<Data>
				can be acheived by difference in return type as long as we have a difference in parameters.
			</Data>
		</Item>
		<Item>
			<Title>
				Early Binding:
			</Title>
			<Data>
				is the static binding in which recognize and check the methods, or properties during compile time. In this binding, the compiler already knows about what kind of object it is and what are the methods or properties it holds.
			</Data>
		</Item>
		<Item>
			<Title>
				Late Binding:
			</Title>
			<Data>
				is the dynamic binding in which the compiler does not know about what kind of object it is and what are the methods or properties it holds, here the objects are dynamic objects. The type of the object is decided on the bases of the data it holds on the right-hand side during run-time.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Function overloading is based on number\types\order of parameters
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between abstract and interface:
			</Title>
			<Data>
				interface is not a class. <br />
				The main difference between them is that a class can implement more than one interface but can only inherit from one abstract class, Since C# doesn't support multiple inheritance, interfaces are used to implement multiple inheritance. <br />
				Another thing that interface can’t contain any implemented methods but abstract can have implemented methods and not implemented methods (with abstract in signature) so when a class implement an abstract it should override all its abstract methods. <br />
				Abstract class cannot be instantiated because at least one method has not been implemented.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Class and Struct:
			</Title>
			<Data>
				Structs are value types while classes are reference types. <br />
				structs can be instantiated without using a new operator. A struct cannot inherit from another struct or class, and it cannot be the base of a class
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				When running code, every function reserve a memory location in the stack so any varaible inside this function should be stored in this memory location, so this is how the function scope variables are no longer available as soon as the compiler finished the function execution and go outside it because at that time it should be deleted from memory.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				The memory of Stack got deallocated as soon as the function ended but in Heap its still as long as the application is running.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				When any application start, the memory manager auto reserve a specific size in Stack for it, but the Heap size can vary during the runtime of the application (Heap is a free pool of memory or dynamic memory), so the Stack memory slots auto-cleared as soon as the function finished calling, but the heap memory cleaning is managed by the garbage collector.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Memory Leak can happen when we inproperly use Heap so there is a lot of unused or unreferenced blocks in the Heap, but for Stack you may have StackOverFlow error
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				You allocate momory in Heap whenever you use (new) keyword.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Memory has different parts: Stack, Heap and Global, Global is used to save the global objects (not function scope)
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Any recursive function should have a condition to end the recursion.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				In mathematical expressions, Multiplication\devision has a priority before addition\substraction.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between value type and reference type:
			</Title>
			<Data>
				A Value Type holds the data within its own memory allocation (in stack) and a Reference Type contains a pointer (in stack) to another memory location that holds the real data (in heap).
				Stack memory is auto deleted as soon as compiler go out of scope of this data, but Heap memory is managed by GC Garbage Collector.<br />
				Reference Type variables are stored in the heap and its reference pointer stored in the stack while Value Type variables are stored in the stack.
				<code>
					User objUser = new User()<br />
					{<br />
					UserID = 1,<br />
					Name = "Jeorge"<br />
					};<br />

					ChangeName(objUser);<br />
					Console.WriteLine(objUser.Name);// Jon Doe<br />

					public static void ChangeName(User user)
					{<br />
					user.Name = "Jon Doe";<br />
					}<br />

					But if we changed ChangeName function to<br />

					public static void ChangeName(User user)
					{<br />
					user = null;<br />
					}<br />
					Console.WriteLine(objUser.Name);// Jeorge<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Despite the String is a reference type it passed by value, What is the secret?
			</Title>
			<Data>
				Because a copy of its reference that’s passed by value
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Stack and Heap:
			</Title>
			<Data>
				Objects allocated on the stack are available only inside of a stack frame (execution of a method), while objects allocated on the heap can be accessed from anywhere
			</Data>
		</Item>
		<Item>
			<Title>
				What is Data Structure in C#:
			</Title>
			<Data>
				is a particular way of organizing data in a computer so that it can be used effectively.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Collections?
			</Title>
			<Data>
				are classes that specialized classes for data storage and retrieval. These classes provide support for stacks, queues, lists, and hash tables.
			</Data>
		</Item>
		<Item>
			<Title>
				What is Generics?
			</Title>
			<Data>
				allow you to write a class or method that can work with any data type. <br />
				<code>
					static void Swap>T>(ref T lhs, ref T rhs) { <br />
					T temp; <br />
					temp = lhs; <br />
					lhs = rhs; <br />
					rhs = temp; <br />
					}<br />
				</code>
				reduce code redunduncy and increase performance, instead of using objects that make us do boxing and unboxing, we use generics to pass the type:<br />
				<code>
					public calss GenericClass>T> where T : IComparable{ <br />
					public T Add(T input1, T input2){ <br />
					} <br />
					}<br />
				</code>
				So, here we have applied generics constraint for T to accept any type that implement IComparable, also we can add more constraints (separated by comma)
			</Data>
		</Item>
		<Item>
			<Title>
				What is Generic Collections?
			</Title>
			<Data>
				A generic collection is strongly typed (you can store one type of objects into it) so that we can eliminate runtime type mismatches, it improves the performance by avoiding boxing and unboxing.<br />
				<code>
					class Check>T>
					{ <br />
					// Gerefic function to compare all data types <br />
					public bool Compare(T var1, T var2) <br />
					{
					if (var1.Equals(var2)) <br />
					{
					return true; <br />
					} <br />
					else
					{ <br />
					return false; <br />
					} <br />
					} <br />
					} <br />
					Check>int>	obj1 = new Check>int>(); <br />
					bool intResult = obj1.Compare(2, 3);
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Event handlers:
			</Title>
			<Data>
				are nothing more than methods that are invoked through delegates
			</Data>
		</Item>
		<Item>
			<Title>
				Delegates:
			</Title>
			<Data>
				Are nothing but a function pointer<br />
				It's an agreement\contract between publisher and subscriber, so simply if you want to do some generic functionality right after finishing executing some task then implement a Delegate Evenet for example:<br />
				* so the idea here is that you have the ability to add any other functionality to be executed after finishing video decoder, <br />
				<code>
					public class MyApp{ <br />
					public void MyMethod(){ <br />
					VideoDecoder decoder = new VideoDecoder(); //publisher <br />
					Notifier notifier = new Notifier(); //subscriber <br />
					<br />
					// let the notifier subscribe to the VideDecoded event <br />
					decoder.VideoDecoded += notifier.OnVideoDecoded; <br />
					decoder.Decode(); <br />
					} <br />
					<br />
					public class VideoDecoder{ // publisher <br />
					public event EventHandler VideoDecoded; <br />
					<br />
					public void Decode(){ <br />
					// decoding... <br />
					} <br />
					protected void OnVideoDecoded()
					{ <br />
					if (VideoDecoded != null) <br />
					VideoDecoded(this, EventArgs.Empty); <br />
					} <br />
					} <br />
					<br />
					public class Notifier{ // subscriber <br />
					public void OnVideoDecoded()
					{ <br />
					SendMail(); <br />
					} <br />
					<br />
					public void SendMail(){ <br />
					// sending mail... <br />
					} <br />
					} <br />
					} <br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How to call several methods in one shot:
			</Title>
			<Data>
				Using Task await (asynchronous threading) Or  using delegate <br />
				<code>
					delegate int deleg(int x);<br />
					deleg delegCall = function1Name;<br />
					delegCall += function2Name;<br />
					delegCall(params if there)
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between ref and out keywords:
			</Title>
			<Data>
				ref tells the compiler that the object is initialized before entering the function, while out tells the compiler that the object will be initialized inside the function.<br />
				* ref is two-ways, out is out-only. <br />
				* method must set the out variable before returning.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between == and string.Equals:
			</Title>
			<Data>
				string.Equals compares the content itself but == compares the reference address
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between string and stringBuilder:
			</Title>
			<Data>
				string Builder represent a mutable string of characters.<br /> So String objects are immutable but String Builder is the mutable string type. It will not create a new modified instance of the current string object but do the modifications in the existing string object.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between var and dynamic:
			</Title>
			<Data>
				var is a statically typed variable. It results in a strongly typed variable, in other words the data type of these variables are inferred at compile time. ... dynamic are dynamically typed variables. This means, their type is inferred at run-time and not the compile time in contrast to var type.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between &amp; and &amp;&amp;:
			</Title>
			<Data>
				&amp;&amp; evaluates the left side of the operation, if it's true, it continues and evaluates the right side. <br />
				&amp; is bitwise AND operator comparing bits of each operand.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between sync and async:
			</Title>
			<Data>
				Synchronization means two or more operations happen sequentially. Asynchronous means two or more operations are running in different contexts (thread) so that they can run concurrently and do not block each other.
			</Data>
		</Item>
		<Item>
			<Title>
				Why use async await:
			</Title>
			<Data>
				Suppose that you have a method with 3 parts, and the 3rd part need the result of the 1st, also you don't want the 2nd to wait for the 1st:<br />
				<code>
					public async Task MyMethodAsync() {<br />
					Task>int> longRunningTask = LongRunningOperationAsync();<br />
					// independent work which doesn't need the result of LongRunningOperationAsync can be done here<br />

					//and now we call await on the task<br />
					int result = await longRunningTask;<br />
					//use the result Console.WriteLine(result);<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is Refactoring:
			</Title>
			<Data>
				is the process of changing the code structure after we complete the writing of the code to increase readability and easy maintenance of the code. Refactoring is done by changing the internal structure of the code without changing the external behavior of the code block.
			</Data>
		</Item>
		<Item>
			<Title>
				HangFire:
			</Title>
			<Data>
				An easy way to perform background processing in .NET and .NET Core applications.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Abstract class doesn't allow us to instantiate it but inherit.
			</Data>
		</Item>
		<Item>
			<Title>
				Abstract class:
			</Title>
			<Data>
				What if you have 2 different class with the same target like SQLDataAccess and OracleDataAccess, then the optimum way to design it like below: <br />
				like this we have implemented the common methods only one time and give the ability to the child classes to override the methods that they have a difference in implementation. <br />
				Also, if you want to give the ability (as optional) to the child classes to override the LoadConnectionString method just put (virtual) keywaord in its signature: <br />
				<code>
					public abstract class DataAccess{ <br />
					public void LoadConnectionString(){ <br />
					.... <br />
					} <br />
					public abstract void LoadData(); <br />
					public abstract void SaveData(); <br />
					} <br />
					<br />
					public class SQLDataAccess: DataAccess{ <br />
					public override void LoadData(){ <br />
					} <br />
					public override void SaveData(){ <br />
					} <br />
					} <br />

					public class OracleDataAccess: DataAccess{ <br />
					public override void LoadData(){ <br />
					} <br />
					public override void SaveData(){ <br />
					} <br />
					} <br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				If you have more than 1 constructor and you want to call one from another (like that the base constructor will run first): <br />
				<code>
					public class Customer{ <br />
					public int Id; <br />
					public string Name; <br />
					public Order _order; <br />
					<br />
					public Customer(){ <br />
					this.Id = 1; <br />
					} <br />
					<br />
					public Customer(string name): this(){ <br />
					this.Name = name; <br />
					this._order = new Order{ <br />
					Id = this.Id, <br />
					Name = this.Name <br />
					}; <br />
					} <br />
					}
				</code> <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Authentication Types: Anonymous, Basic, Forms and Windows > difference?
			</Title>
			<Data>
				ASP.NET provides two main ways to secure your web applications. They are - Windows authentication and Forms authentication. Windows authentication uses windows users names and passwords to authenticate them where as Forms authentication typically uses user ids and passwords stored in some database.
			</Data>
		</Item>
		<Item>
			<Title>
				Using operator:
			</Title>
			<Data>
				The using statement defines a scope at the end of which an object will be disposed. The using directive creates an alias for a namespace or imports types defined in other namespaces. The using static directive imports the members of a single class.
			</Data>
		</Item>
		<Item>
			<Title>
				When to use Struct:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				.NET Authentication:
			</Title>
			<Data>
				<code>using Microsoft.Owin.Security.OAuth;</code>
				In <code>startup.Auth.cs</code>
				<code>
					static Startup() { <br />
					OAuthOptions = new OAuthAuthorizationServerOptions() { <br />
					AllowInsecureHttp = true, <br />
					TokenEndpointPath = new PathString("/token"), <br />
					AccessTokenExpireTimeSpan = TimeSpan.FromDays(360), <br />
					Provider = new OAuthAppProvider() <br />
					}; <br />
					} <br />
				</code> <br />
				> By creating a class that inherits from OAuthAuthorizationServerProvider to override 2 methods: <br />
				ValidateClientAuthentication: <br />
				GrantResourceOwnerCredentials: in which validate the client credentials (i.e. username and password). If it found the credentials are valid then create ClaimsIdentity object to set some user’s data\claims using ClaimType enums including ClaimType.Role to be used in Authenticate(Role = “”), then only it generates the access token. The client then using this access token can access the authorized resources from the Resource Server. <br />
				> By calling /token and pass the data {username: ‘’, password: ‘’, grant_type = 'password'} to authenticate user and return his data. <br />
				https://dotnettutorials.net/lesson/token-based-authentication-web-api/
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				If you want to segregate two interfaces without repeat members you can do this:
				<code>
					public interface IProduct{ <br />
					void A(); <br />
					void B(); <br />
					} <br />
					public interface IClothes{ <br />
					void C(); <br />
					} <br />
					public class Dress: IClothes{ <br />
					} <br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Complexity analysis:
			</Title>
			<Data>
				is a rough approximation of the number of steps necessary to execute an algorithm.
			</Data>
		</Item>
		<Item>
			<Title>
				ADO.NET:
			</Title>
			<Data>
				is a set of classes (a framework) to interact with data sources such as databases and XML files. It allows us to connect to underlying data or databases. It has classes and methods to retrieve and manipulate data.
			</Data>
		</Item>
		<Item>
			<Title>
				What is cloud-computing systems:
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				(IOC) Inventory of control (.NET Core):
			</Title>
			<Data></Data>
		</Item>
		<Item>
			<Title>
				Difference between .Net and .Net Core:
			</Title>
			<Data>
				The .NET Framework supports Windows and Web applications, .NET Core is the new cross-platform and open-source .NET framework to develop applications for all major operating system including Mac, Linux, and Windows.. and it also provides the middleware layer.<br />
				And Web.Config becomes appsettings.json as JSON instead of XML.
			</Data>
		</Item>
		<Item>
			<Title>
				UML: (Unified Modeling Language)
			</Title>
			<Data>
				is a standardized general-purpose modeling language in the field of object-oriented software engineering .It is a visual language for specifying, constructing, and documenting the artifacts of systems.
			</Data>
		</Item>
		<Item>
			<Title>
				String interpolation:
			</Title>
			<Data>
				$”this is {varName}”
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Constructor shouldn’t have a return type.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between I++ and ++I :
			</Title>
			<Data>
				++I will return the new value
			</Data>
		</Item>
		<Item>
			<Title>
				padRight and padLeft:
			</Title>
			<Data>
				are used to add characters to the beginning and end of your text
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between break and return:
			</Title>
			<Data>
				The return instruction is used either to return a function value or to terminate the execution of a function.<br />
				The break instruction terminates the execution of the loop.
			</Data>
		</Item>
		<Item>
			<Title>
				C# Access Modifiers:
			</Title>
			<Data>
				<b>Public:</b> accessible from everywhere in our project.<br />
				<b>Private:</b> accessible only inside a class or a structure.<br />
				<b>Protected:</b> implies that the object is accessible inside the class and in all classes that derive from that class.<br />
				<b>Internal:</b> keyword specifies that the object is accessible only inside its own assembly<br />
				<b>Protected internal:</b> we can access the protected internal member only in the same assembly or in a derived class in other assemblies (projects)<br />
			</Data>
		</Item>
		<Item>
			<Title>
				Inheritance:
			</Title>
			<Data>
				Parent = new Child()
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between extend and implement:
			</Title>
			<Data>
				extend is inheritance but implement is implementing an interface
			</Data>
		</Item>
		<Item>
			<Title>
				Yeild return:
			</Title>
			<Data>
				The yield keyword signals to the compiler that the method in which it appears is an iterator block so it will customize iteration through a collection without creating a temporary collection so it should return IEnumerable collection
			</Data>
		</Item>
		<Item>
			<Title>
				Generics:
			</Title>
			<Data>
				path parameters dynamically instead of using overload?
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Boxing and Unboxing:
			</Title>
			<Data>
				Boxing is the conversion of the value type to an object type whereas, on other hands, the term Unboxing refers to the conversion of the object type to the value type.
			</Data>
		</Item>
		<Item>
			<Title>
				Implementing base type of generic type:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Threading:
			</Title>
			<Data>
				allows concurrent programming of two or more parts of the program for maximizing the utilization of the CPU. Each part of a program is called Thread. So, in other words, threads are lightweight processes within a process.
			</Data>
		</Item>
		<Item>
			<Title>
				MultiThreading:
			</Title>
			<Data>
				Multithreading in C# is a process in which multiple threads work simultaneously. It is a process to achieve multitasking. It saves time because multiple tasks are being executed at a time. To create multithreaded application in C#, we need to use System.Threding namespace.
			</Data>
		</Item>
		<Item>
			<Title>
				Deadlock in C#:
			</Title>
			<Data>
				is a situation where two or more threads are frozen in their execution because they are waiting for each other to finish
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Thread and Process and Task:
			</Title>
			<Data>
				A task can have multiple processes happening at the same time. And the process can have at least one thread. <br />
				Task is preferred that Thread because when you run code using Task you make the ThreadPool create a new thread whenever a thread is available but when you run code using Thread you immediately create a new thread however may be at this time there no available threads
			</Data>
		</Item>
		<Item>
			<Title>
				How to make a specific task\process excuted on a specific CPU:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				interface can’t be implemented by abstract class
			</Data>
		</Item>
		<Item>
			<Title>
				ESP Enterprise Service Path:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Parse and Convert:
			</Title>
			<Data>
				Convert handle null values
			</Data>
		</Item>
		<Item>
			<Title>
				How system handle function calls:
			</Title>
			<Data>
				by call stack
			</Data>
		</Item>
		<Item>
			<Title>
				What Aggregate method do:
			</Title>
			<Data>
				is a function and is required to group together the values of the multiple rows as the input and returns the output as single value
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between throw, throw(ex) and throws:
			</Title>
			<Data>
				- throw(ex) will reset your stack trace so error will appear from the line where throw(ex) written while throw does not reset stack trace and you will get information about original exception. <br />
				- throws used in class declaration
			</Data>
		</Item>
		<Item>
			<Title>
				What is Enumerators:
			</Title>
			<Data>
				is a value data type in C#. It is mainly used to assign the names or string values to integral constants, that make a program easy to read and maintain.
			</Data>
		</Item>
		<Item>
			<Title>
				Bitwise AND (&amp;):
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				$ Bitwise Inclusive OR (|):
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				$ Bitwise Exclusive OR (XOR):
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				String manipulation:
			</Title>
			<Data>
				is the string operations that handle those such things can be Length property, ToCharArray(), ToLower(), ToUpper(), IndexOf(), LastIndexOf(), SubString(), CompareTo(), Trim(), TrimEnd(), TrimStart(), StartsWith(), EndsWith(), Split(), Insert(), Remove(), and Replace().
			</Data>
		</Item>
		<Item>
			<Title>
				Destructor:
			</Title>
			<Data>
				like constructor but method name preceded with (~)
			</Data>
		</Item>
		<Item>
			<Title>
				Modulus operator:
			</Title>
			<Data>
				%
			</Data>
		</Item>
		<Item>
			<Title>
				IDisposable interface:
			</Title>
			<Data>
				is an interface that contains a single method, Dispose(), for releasing unmanaged resources, like files, streams, database connections and so on.
			</Data>
		</Item>
		<Item>
			<Title>
				What is ViewState in .NET?
			</Title>
			<Data>
				preserve the Value of the Page and Controls between round trips. It is a Page-Level State Management technique. View State is turned on by default and normally serializes the data in every control on the page regardless of whether it is actually used during a post-back.<br />
				You can enable\disable viewstate on the whole page of a particular element
			</Data>
		</Item>
		<Item>
			<Title>
				In which event of page cycle is the ViewState available?
			</Title>
			<Data>
				After the Init() and before the Page_Load()
			</Data>
		</Item>
		<Item>
			<Title>
				What is the difference between Server.Transfer and Response.Redirect?
			</Title>
			<Data>
				In Server.Transfer page processing transfers from one page to the other page without making a round-trip back to the client's browser. This provides a faster response with a little less overhead on the server. The clients url history list or current url Server does not update in case of Server.Transfer.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				if we have class Base and class Child, when we do <code> Base c = new Child();</code> THEN Base constructor run first then child constructor
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				We have to understand Data Structures well because the data structure object you decide to use will affect your code performance
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				To deside what kind of data structures you should use, you need to consider these factors: size of data, is the data fixed or dynamic, how much frequent operations done (cost of operations),
			</Data>
		</Item>
		<Item>
			<Title>
				Data Structures has 2 types:
			</Title>
			<Data>
				Linear Data Structures like Array, Stack, Queue, Linked List and Hierachical Data Structures like Tree and Graphs.
			</Data>
		</Item>
		<Item>
			<Title>
				Recursive Function:
			</Title>
			<Data>
				<b>Keep in mind that,</b> Recursive functions is used in most of Data Structures implementation. <br />
				<b>Recursive Function:</b> a function that call itself, example: Factorial and Fibunacci numbers implementation <br />
				<code>
					public int Factorial(int n){ <br />
					if (n >= 1) { return n * Factorial(n - 1); } <br />
					else { return 1; } <br />
					} <br />
					public int Fibonacci(int n) <br />
					{ <br />
					if (n >= 3) { return Fibonacci(n - 1) + Fibonacci(n + 2); } <br />
					else { return 1; } <br />
					} <br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Big O
			</Title>
			<Data>
				Big O is simply used to describe the performance of an algorithm, which describe the Time and Space complexity. <br />
				Big O: is how much the runtime of this code increases as the size of the input increases <br />
				- Constant O(1): the time doesnt increase by incresing input size. <br />
				- Linear O(n): the time consumed increase as much as the input increase. <br />
				- Quadratic O(n^2):
			</Data>
		</Item>
		<Item>
			<Title>
				Code Time Complexity:
			</Title>
			<Data>
				Big O notation, the time complexity measure unit which describes performance which helps us to decide what resource like Hard Disk, RAM or Processor capacity should be used to run the application.
				O(1) Constant: static input
				O(log(n)) Logarithmic: finding element in a sorted array with binary search (Binary search in C# Binary search works on a sorted array. The value is compared with the middle element of the array. If equality is not found, then the half part is eliminated in which the value is not there.)
				O(n) Linear: finding max element in unsorted array
				O(n log n) Linearithmic: sorting elements in array with merge sort
				O(n2) Quadratic: sorting array with bubble sort
				O(n3) Cubic:
				O(2n) Exponential: find all subsets
				O(n!) Factorial:
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Code performance is always to Save Time and Save Space, so you need to decide which factor is more important so if you are developing a mobile app then saving space is much important and so on.
			</Data>
		</Item>
		<Item>
			<Title>
				Data Structures:
			</Title>
			<Data>
				<b>Array:</b> list of a specific count of elements with a specific data type,<br />
				Array is a collection of items that should be with a fixed length, and we can't add more numbers to exceed the length BECAUSE, in memory we book a specific number of bytes to insert array values sequentialy so that we may have other variables book the next slots of memory so we can't insert new values beside the old values in memory, because to insert array values we need a bunch of consective bytes.<br />
				and what about the List (the dynamic array) its working like everytime you add a new value it defines a new array with the length of old + new values and so on<br />
				Time needed to access an element in array is O(1) constant time because the array elements are stored in a contigious block of memory<br />
				<br />
				<b>List:</b> is a collection of objects with the same data type, it has no good memory utilization since it creates a new memory locations for the whole elements every time you add or remove elements.<br />
				<b>ArrayList:</b> list of elements with dynamic data type<br />
				<b>LinkedList:</b> every node has 2 locations in memory, one for the node value and another for a pointer to the next node,<br />
				to access element in the linked list, it takes O(n),<br />
				Apart from storing linked list elements into memory, we need also another memory slot to save the address of the first element in the linked list (a pointer to head) which called the identity of the linked list.<br />
				what is distinguish linked list than array is that if you want to add\remove an element to\from the linked list you will just need to reference the next element address in its value and also set the new element's address as reference in the previous element, but in array you will need to shift the index increase\decrease for all elements after\before the element you want to delete\add.<br />
				So in general linked list need extra memroy for every element to store a reference to the next element, but array need only one slot of memory for every element.<br />
				<code>
					public class LinkedTest>T><br />
					where T : class{<br />
					public int ListCount(NodeTest>T>head)<br />
					{<br />
					int count = 0;<br />
					NodeTest>T>	currentNode = head;<br />
					while (currentNode != null)<br />
					{<br />
					currentNode = currentNode.Next;<br />
					count++;<br />
					}<br />
					return count;<br />
					}<br />
					}<br />
					public class NodeTest>T>where T : class<br />
					{<br />
					public int Value { get; set; }<br />
					public NodeTest>T> Next { get; set; }<br />
					}<br />
				</code>
				<b>Doubly Linked List:</b> is a normal linked list but each element has 2 references, one for the next node and another for the previous node.<br />
				<b>Dictionary:</b> list of key, value pairs for a specific key value data types, it talk O(1) time to find an element<br />
				<b>Hashtable, HashMap:</b> like Dictionary list of key, value pairs for a dynamic key value types, Hash Table: a collection of key-and-value pairs that are organized based on the hash code of the key, which uses the Hash Function to hash the key<br />
				a methodology for storing array elements in indexes related to its values (do some equations to calculate the element index from its value)<br />
				<b>HashSet:</b> list of distinct elements (it ignore duplicates)<br />
				<b>HashMap data structure:</b> like Dictionary (key and value) but with a dynamic data types<br />
				<b>Stack:</b> LIFO last in first out<br />
				<b>Queue:</b> FIFO first in first out<br />
				<b>Most common examples of using Stack data structure is:</b> Function Calls so the last function enter stack is the first one to finish, Also one more example is the Undo function to reverse changes one by one most recently.<br />
				- Stack and Queue can be implemented using Array or LinkedList<br />
				<b>Tree data structure</b> is used to store a hierarchical data, where each node has 1 or more childs<br />
				<b>Binary Tree:</b> is a normal tree where each node has only 2 childs<br />
				<b>Binary Search Tree (BST):</b> is a binary tree where for every node, all nodes on its right side has value greated than its value and all nodes to the left has value less than its value,, exactly like the Binary Search in general we should have the array sorted so this is the same we assume the tree as a binary search tree if each node in the left is less than its sibling in the right.<br />
				so finding an element in a binary search tree is just costing O(log n).<br />
				so if you want to find the minimum value in a BST, you just go to the left as much as it exists (the last element), and the miximum is the last element in the right.<br />
				<b>Hight of a node:</b> is the number of edges in the longest path from the node to the leaf node.<br />
				<b>Graph:</b> is a Tree but with no leaves, where the number of nodes equal the number of edges.<br />
				<b>Directed Graph:</b> where the edges between nodes are in one direction, but the Undirected Graph, the edges have 2 directions.<br />
				<b>INFO:</b> social networks are a good example for the UnDirected Graph where each node has 2 directions to each other.<br />
			</Data>
		</Item>
		<Item>
			<Title>
				Popular algorithms you should know:
			</Title>
			<Data>
				<b>Linear Search:</b> It sequentially checks each element of the list until a match is found or the whole list has been searched, it cost O(n)<br />
				<br />
				<b>Binary Search:</b> assuming that the elements are sorted, go to the middle point of array and check if the target is greater than the middle then move to the right and repeat:<br />
				Binary search looks for a particular item by comparing the middle most item of the collection. If a match occurs, then the index of item is returned. If the middle item is greater than the item, then the item is searched in the sub-array to the left of the middle item<br />
				<br />
				<b>DFS Depth First Search:</b> is used to find an element in a graph\tree by visiting all graph nodes and exploring all connected nodes as following, it cost O(n):<br />
				1. visit any node as a start node, and push to STACK.<br />
				2. loop through the stack:<br />
				- for current node, explore one of its connected node and check if its not exist in the stack (not visited) then push to the stack otherwise pop from the stack untill you reach this visited node and check the other connected node for this visited node.<br />
				- repeat the process until the stack become empty<br />
				<br />
				<b>BFS Breadth First Search:</b> is used to find an element in a graph\tree by visiting all graph nodes and exploring all connected nodes as following, it cost O(n):<br />
				1. visit any node as a start node, and push to QUEUE.<br />
				2. loop through the queue<br />
				.... for current node, explore all connected nodes by enqueueing them into queue and delete this node<br />
				.... repeat untill the queue is empty<br />
				<br />
				<b>Quick Sort:</b> its a devide and conquer algorithm where every element find its sorted position that follow the below steps:<br />
				- partition list into 2 sub-arrays by selecting the pivot element:<br />
				.... consider pivot as the first element.<br />
				.... loop through elements if found element less than pivot then swap it, until the left and right pointers replaced<br />
				.... swap the pivot with the last swaped location location (move pivot to its sorted location).<br />
				.... return the last swaped location as the new pivot<br />
				- repeat the quickSort again from left to pivot<br />
				- repeat the quickSort again from pivot to right<br />
				<br />
				<b>Merge Sort:</b> based on the Devide and Conquer approach, we devide the list into sub lists until we have a very small lists (1 element) then merge it up (sorted) one by one until merge it all again but in a sorted order, it cost O(n log n)<br />
				<br />
				<b>Bubble Sort:</b> loop twice in list elements, so it cost O(n^2)<br />
				- loop to compare each element with the next one, if the next one is greater, then swap<br />
				- execlude the last element from the list because it will be already sorted<br />
				- repeat first step<br />
				- exclude the last 2 elements, because it will be sorted<br />
				- repeat this until either excluding all elements or found an iteration without any replacement<br />
				<br />
				<b>Selection Sort:</b> simply is foreach element we select the elment that is less than it and swap them, so it cost O(n^2)<br />
				<br />
				<b>Insertion Sort:</b> is simply foreach element we insert it in its sorted position, so it cost O(n^2)<br />
				<br />
				<b>Prime number:</b> is the numbers that has zero reminder % in only 1 and itself (accept devide by 1 and itself)<br />
				<br />
				<b>Factorial:</b><br />
				<br />
				<b>Fibonacci numbers:</b> Is a list of numbers where every number is the sum of the two preceding ones.<br />
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Float, Double and Decimal:
			</Title>
			<Data>
				main difference is the size of fraction <br />
				float 7 digits of precision <br />
				double has about 15 digits of precision <br />
				decimal has about 28 digits of precision <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Parce and ParceExact:
			</Title>
			<Data>
				both converts string to date but ParseExact enable parsing to a particular format.
			</Data>
		</Item>
		<Item>
			<Title>
				Reflection:
			</Title>
			<Data>
				is used to retrieve metadata on types at runtime.<br />
				In using reflection, you get objects of the type "Type" that can be used to represent assemblies, types, or modules. <br />
				You can use reflection to create an instance of a type dynamically and even invoke methods of the type.
			</Data>
		</Item>
		<Item>
			<Title>
				Disadvantages of reflection:
			</Title>
			<Data>
				Performance
			</Data>
		</Item>
		<Item>
			<Title>
				C# object indexer:
			</Title>
			<Data>
				An indexer is a special type of property that allows a class or a structure to be accessed like an array for its internal collection. C# allows us to define custom indexers, generic indexers, and also overload indexers, An indexer can be defined the same way as property with this keyword and square brackets []<br />
				<code>
					class StringDataStore{ <br />
					private string[] strArr = new string[10]; // internal data storage<br />
					<br />
					public string this[int index]<br />
					{<br />
					get => strArr[index];<br />
					set => strArr[index] = value;<br />
					}<br />
					}
				</code><br />
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Property and Field:
			</Title>
			<Data>
				Property is a member that provides a flexible mechanism to read, write or compute the data of a private field.<br />
				Field is the private members of a class that contain values specific to the object<br />
				<code>
					// this is a field.  It is private to your class and stores the actual data.<br />
					private string _myField;<br />
					// this is a property. When accessed it uses the underlying field,<br />
					// but only exposes the contract, which will not be affected by the underlying field<br />
					public string MyProperty<br />
					{<br />
					get {<br />
					return _myField;<br />
					}<br />
					set {<br />
					_myField = value;<br />
					}<br />
					}
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				SOLID Principles :
			</Title>
			<Data>
				an acronym for: <br />

				<b>S (Single Responsibility Principle):</b> class should have responsibility for just a single piece of that program's functionality, it’s not preferred to handle exception inside business class but do it in an external class Exception Handler so this class will have a single responsibility. <br />

				<b>O (Open Close Principle):</b> states "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification", it’s not preferred to edit class code but add an extension with the new code. <br />
				The extension here means to implement an extension method or create a new child class, suppose that you have a class (Shape) that has a (CalcArea) method to calculte shape area, this method has a (if shape is circle then do bla bla bla, else id square then do bla bla) and now you want to add more shape to calculate rectangle are then the principle here is not change that class but idealy to create an abstract class (Shape) that has also an abstract method (CalculteArea) and create a class for eac shape to do special implementation for CalculateArea method <br />

				<b>L (Liskov Substitution Principle):</b> the subtype must be substitutable for its base type, so suppose that you have a Rectangle class which has a SetWidth method, and now you want to implement a Square class then you should NOT inherit from Rectangle class to reuse the SetWidth method but idealy to create a base class for both Shape class, it’s not preferred that the child class can’t use all objects of the parent class so you better create a bridge class: <br />
				<code>
					public class Bird{ <br />
					} <br />
					public class FlyingBirds : Bird{ <br />
					public void fly(){} <br />
					} <br />
					public class Duck : FlyingBirds{} <br />
					public class Ostrich : Bird{} <br />
				</code>
				so FlyingBirds here is the bridge class <br />

				<b>I (interface-segregation principle):</b> (Keep your interface as small as possible) the child class should not implement not related methods of big interface but idealy you should break down the big interface into a small interfaces based on the business, it’s not preferred to add more methods to interface but create a new one in which you add the new needed methods. <br />

				<b>D (Dependency inversion principle):</b> (Depend upon abstractions\interfaces rather than concrete class). High level modules should not depend on low level modules but both should depend on abstractions and those abstractions should not depend on details. <br />
				It’s not preferred to do this: <br />
				<code>
					class Customer : IDiscount, IDatabase <br />
					{ <br />
					private IException obj; <br />

					public virtual void Add(int Exhandle) { <br />
					try { <br />
					// Database code goes here <br />
					} <br />
					catch (Exception ex) { <br />
					if (Exhandle == 1) { <br />
					obj = new MyException(); <br />
					} <br />
					else { <br />
					obj = new EmailException(); <br />
					} <br />
					obj.Handle(ex.Message.ToString()); <br />
					} <br />
					} <br />

					But instead do this: <br />
					class Customer : IDiscount, IDatabase <br />
					{ <br />
					private Ilogger obj; <br />
					public Customer(ILogger i) <br />
					{ <br />
					obj = i; <br />
					}<br />
					}<br />
					IDatabase i = new Customer(new EmailLogger());<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				What is dependency injection:
			</Title>
			<Data>
				is a technique whereby one object (or static method) supplies the dependencies of another object, to prevent the high level modules being depends on the low level modules,<br />
				So this is a way of applying Dependency Inversion principles of SOLID
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Dependency Inversion and Dependency Injection:
			</Title>
			<Data>
				dependency inversion is the principle but dependency injection is a way of applying this principle.
			</Data>
		</Item>
		<Item>
			<Title>
				Pass by value\reference
			</Title>
			<Data>
				<b>Pass by reference:</b> When you pass a reference type variable from one method to another, it doesn't create a new copy; instead, it passes the address of the variable. If we now change the value of the variable in a method, it will also be reflected in the calling method.<br />
				<b>Pass by value:</b> When you pass a value type variable from one method to another method, the system creates a separate copy of a variable in another method, so that if value got changed in the one method won't affect on the variable in another method.
			</Data>
		</Item>
		<Item>
			<Title>
				Caching Server Side:
			</Title>
			<Data>
				Caching is a technique where we can store frequently used data <br />
				Session\User Caching: data is stored at the user level <code> Session["userName"] = "Omar";</code> <br />
				Application Caching: data stored over the application level <code>HttpContext.Current.Cache.Insert(args);</code> <br />
				Memory Caching: used for when you want to implement cache in a single process. When the process dies, the cache dies with it. (namespace > System.Runtime.Caching) <code>var cache = MemoryCache.Default; var item = cache.Get("CacheKey"); </code><br />
				Disk Caching: usually used for caching files on disk <br />
				Distrbuted Caching: A distributed cache is a cache shared by multiple app servers, typically maintained as an external service to the app servers that access it. A distributed cache can improve the performance and scalability of an ASP.NET Core app, especially when the app is hosted by a cloud service or a server farm. <br />
				Redis distributed caching: Redis is an open source in-memory data store, which is often used as a distributed cache. You can use Redis locally (using Docker Desktop app), and you can configure an Azure Redis Cache for an Azure-hosted ASP.NET Core app. <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Unit Testing:
			</Title>
			<Data>
				is to validate that each unit of the software code performs as expected
			</Data>
		</Item>
		<Item>
			<Title>
				Data Driven Development (DDD):
			</Title>
			<Data>
				is something that one can make changes to the logic of the program by editing not the code but the data structure. <br />
				The application has nothing but rules (Engine) . What makes it useful is the data that will flow through it.
			</Data>
		</Item>
		<Item>
			<Title>
				Test Driven Development (TDD):
			</Title>
			<Data>
				relying on a testing framework (MS Test, NUnit or XUnit), and writing unit tests before coding to be automated lated
			</Data>
		</Item>
		<Item>
			<Title>
				Domain Driven Development (TDD):
			</Title>
			<Data>
				Simply, the domain is an area of knowledge, so DDD is the concept that the structure and language of software code should match the business domain.
			</Data>
		</Item>
		<Item>
			<Title>
				Length of memory allocated for Int data type?
			</Title>
			<Data>
				4 bytes
			</Data>
		</Item>
		<Item>
			<Title>
				How to execute a transaction using ADO.NET and EF:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				If you have a List>int>, Where should it be stored? and If you have 1 million item in this list where do it stored and are we have a limitations in memory?
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				How dictionary data type works? How many operations does .net talks to search for an item inside dictionary? and what is the complexity?
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				If you have a memory leackage in IIS, How would you troubleshoot this problem?
			</Title>
			<Data>

			</Data>
		</Item>
	</Section>
	<Section Title="Entity Framework">
		<Item>
			<Title>
				ORM (Object Relational Mapping):
			</Title>
			<Data>
				is a technique that lets you query and manipulate data from a database using an object-oriented paradigm.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between IEnumerable and IQuerable in EF:
			</Title>
			<Data>
				IEnumerable execute select query on server side, load data in-memory on client side and then filter data while IQueryable execute select query on server side with all filters.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between FirstOrDefault and First in EF:
			</Title>
			<Data>
				First() will throw an exception if there is no result data for the supplied criteria, whereas FirstOrDefault() returns a default value (null) if there is no result data.
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between SingleOrDefault and Single in EF:
			</Title>
			<Data>
				SingleOrDefault() returns default value of the data type of a collection if a collection is empty, includes more than one element or finds no element or more than one element for the specified condition.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				When write a LINQ query ended with .ToList() > it will return IEnumerable.
			</Data>
		</Item>
		<Item>
			<Title>
				Write a left\right\inner join query with LINQ:
			</Title>
			<Data>
				Add this right after join <code>from z in jointable.DefaultIfEmpty()</code>
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				Entity Framework is injection safe since it always generates parameterized SQL commands which help to protect our database against SQL Injection.
			</Data>
		</Item>
		<Item>
			<Title>
				DbSet:
			</Title>
			<Data>
				is a typed entity set which is used to perform create, read, update, and delete operations on a particular entity. DbSet is can only be created from a DbContext instance. DbSet does not support the Entity SQL methods.
			</Data>
		</Item>
		<Item>
			<Title>
				How to execute plain SQL in EF6?
			</Title>
			<Data>
				<code>
					DbSet.SqlQuery() <br />
					DbContext.Database.SqlQuery() <br />
					DbContext.Database.ExecuteSqlCommand()
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				How does EF support Transaction?
			</Title>
			<Data>
				In EF, whenever you execute SaveChanges() to insert, update or delete data into the database, it wraps that operation in a transaction. So, you don’t need to open a transaction scope explicitly.
			</Data>
		</Item>
		<Item>
			<Title>
				What is the purpose of a DBContext class?
			</Title>
			<Data>
				DbContext as the database connection and a set of tables, and DbSet as a representation of the tables themselves. The DbContext allows you to link your model properties (presumably using the Entity Framework) to your database with a connection string.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				EF uses the Disconnected mode while connecting to DB.
			</Data>
		</Item>
		<Item>
			<Title>
				EF types of loading:
			</Title>
			<Data>
				<b>Lazy Loading:</b> default behavior which retrieves all related entities, it can be disabled by adding the below in the constructor of Entities class <br />
				<code>this.Configuration.LazyLoadingEnabled = false;</code>
				<b>Eager Loading:</b> <code>entity.Include(x => x.SubEntity)</code>
				<b>Explicit Loading:</b> Use the Load() method to load related entities explicitly.
				<code>Context.Entry(entityObject).Reference(x => x.subEntity).Load();</code>
			</Data>
		</Item>
	</Section>
	<Section Title="MVC">
		<Item>
			<Title>
				MVC Life Cycle:
			</Title>
			<Data>
				Request > Controller > Action Excution > Result Excution > View Engine > Result Excution > Response
			</Data>
		</Item>
		<Item>
			<Title>
				MVC Filters types and order of executing:
			</Title>
			<Data>
				Authorization filters, Action filters, Result filters, Exception filters
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between ViewBag, ViewData and TempData:
			</Title>
			<Data>
				ViewBag and ViewData are used to pass the data from Controller action to View and TempData is used to pass the data from action to another action or one Controller to another Controller.
			</Data>
		</Item>
		<Item>
			<Title>
				What exactly the use of ViewModel in MVC:
			</Title>
			<Data>
				to encapsulate the multiple entities into single entity. It is basically a combination of data models into single object and rendering by the view. Sometimes it is required to show the multiple entities data on view which is coming from different data model classes.
			</Data>
		</Item>
		<Item>
			<Title>
				What is MVVM:
			</Title>
			<Data>
				is an architectural pattern that separate the development of the graphical user interface from the development of the business logic or back-end logic so that the view is not dependent on any specific model platform.
			</Data>
		</Item>
		<Item>
			<Title>
				difference between Temp data, View, and View Bag?
			</Title>
			<Data>
				<b>Temp data:</b> It helps to maintain data when you shift from one controller to other controller. <br />
				<b>View data:</b> It helps to maintain data when you move from controller to view <br />
				<b>View Bag:</b> It's a dynamic wrapper around view data <br />
			</Data>
		</Item>
	</Section>
	<Section Title="SQL">
		<Item>
			<Title>
				SSRS, SSIS
			</Title>
			<Data>
				<b>SQL Server Integration Services (SSIS):</b> is a component of the Microsoft SQL Server database software that can be used to perform a broad range of data integration and data transformation tasks.<br />
				It is basically an ETL (Extract, Transform and Load) tool part of the Microsoft Business Intelligence suit that is mainly used to achieve Data Integration.<br />
				<b>SQL Server Reporting Services (SSRS):</b> is a solution that customers deploy on their own premises for creating, publishing, and managing reports, then delivering them to the right users in different ways,  whether that’s viewing them in web browser, on their mobile device, or as an email in their in-box.<br />
				<b>SSRS</b> is a reporting software that allows you to produce formatted reports with tables in the form of data, graph, images, and charts. These reports are hosted on a server that can be executed any time using parameters defined by the users. It is part of Microsoft SQL Server Services suite.<br />
				You first create the report itself (.rdl) by desiging it and provide the data source (db connection) and the data set (query or stored procedure) and then configure the subscription, all of this after configuring the SSRS reporting server and configuring the mail settings, from the SQL Server you can connect to thr Reporting Server and click server properities to get the URL and paste this URL in VS > project properities > Target ServerURL and then right click on project and choose deploy (dont forget to Run As Admin), to view the report open the Web Portal url in IE with Run As Admin<br />
			</Data>
		</Item>
		<Item>
			<Title>
				Conceptual and Logical data model:
			</Title>
			<Data>
				A conceptual data model identifies the highest-level relationships between the different entities.<br />
				A logical data model describes the data in as much detail as possible, without regard to how they will be physical implemented in the database.
			</Data>
		</Item>
		<Item>
			<Title>
				Conceptual and Logical data model:
			</Title>
			<Data>
				Computed Column: is writing equation in (Computed column specification) in column properties and its usually a combination of a couble of columns.<br />
				And if (Persisted) property is set to off then the calculated column will be just a virtual column. No data for this column will be stored on disk and values will be calculated every time when referenced in a script.
			</Data>
		</Item>
		<Item>
			<Title>
				DbUp:
			</Title>
			<Data>
				is a . NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date.
			</Data>
		</Item>
		<Item>
			<Title>
				INFO:
			</Title>
			<Data>
				in CHARINDEX() function the first index in the string is 1 not 0 :D
			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Unique key and Primary key:
			</Title>
			<Data>
				Primary Key is not allowing NULL and used to identify a row (record) in a table, whereas Unique-key is to prevent duplicate values in a column
			</Data>
		</Item>
		<Item>
			<Title>
				SQL Table, Column standards:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Extranet Views:
			</Title>
			<Data>

			</Data>
		</Item>
		<Item>
			<Title>
				Difference between Procedure and Function:
			</Title>
			<Data>
				The function must return a value but in Stored Procedure it is optional. Even a procedure can return zero or n values. Functions can have only input parameters for it whereas Procedures can have input or output parameters.
			</Data>
		</Item>
		<Item>
			<Title>
				Is Indexing affect update, delete queries performance?
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				Creating many indexes will increase or decrease performance?
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				Aside
			</Title>
			<Data>
			</Data>
		</Item>
		<Item>
			<Title>
				SQL difference between:
			</Title>
			<Data>
				<b>Char:</b> store string in a fixed length (static memory allocation) <br />
				<b>Varchar:</b> store string in a variable length (dynmic memory allocation) and stores data at 1 byte per character. <br />
				<b>NChar\NVarchar:</b> N refers to national character so the only difference is that supporting national characters and stores data at 2 bytes per character. <br />
			</Data>
		</Item>
		<Item>
			<Title>
				What is the use of OrderBy, GroupBy:
			</Title>
			<Data>
				ORDER BY is used to sort a result by a list of columns or expressions. <br />
				GROUP BY is used to create unique combinations of a list of columns that can be used to form summaries.
			</Data>
		</Item>
		<Item>
			<Title>
				What is distinct:
			</Title>
			<Data>
				The SELECT DISTINCT statement is used to return only distinct (different) values. Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.
			</Data>
		</Item>
		<Item>
			<Title>
				SQL Cursor to loop on records:
			</Title>
			<Data>
				<code>
					DECLARE @MyCursor CURSOR; <br />
					DECLARE @MyField YourFieldDataType; <br />
					BEGIN <br />
					SET @MyCursor = CURSOR FOR <br />
					select top 1000 YourField from dbo.table <br />
					where StatusID = 7 <br />
					<br />
					OPEN @MyCursor <br />
					FETCH NEXT FROM @MyCursor <br />
					INTO @MyField <br />
					<br />
					WHILE @@FETCH_STATUS = 0 <br />
					BEGIN<br />
					/*<br />
					YOUR ALGORITHM GOES HERE<br />
					*/<br />
					FETCH NEXT FROM @MyCursor<br />
					INTO @MyField<br />
					END;<br />
					<br />
					CLOSE @MyCursor ;<br />
					DEALLOCATE @MyCursor;<br />
					END;<br />
				</code>
			</Data>
		</Item>
		<Item>
			<Title>
				Explain joins:
			</Title>
			<Data>
				<b>INNER JOIN:</b> Returns records that have matching values in both tables. <br />
				<b>LEFT (OUTER) JOIN:</b> Returns all records from the left table, and the matched records from the right table <br />
				<b>RIGHT (OUTER) JOIN:</b> Returns all records from the right table, and the matched records from the left table <br />
				<b>FULL (OUTER) JOIN:</b> Returns all records when there is a match in either left or right table <br />
			</Data>
		</Item>
		<Item>
			<Title>
				Cross join:
			</Title>
			<Data>
				Is returning both tables: <br />
				<code>select * from employee cross join department </code> is the same as <code>select * from employee, department </code>
			</Data>
		</Item>
		<Item>
			<Title>
				Union and Union All:
			</Title>
			<Data>
				both used to combines the result set of two or more SELECT statements. <br />
				Union will return the distinct rows but Union All will return the duplicated ones
			</Data>
		</Item>
		<Item>
			<Title>
				Having Clause:
			</Title>
			<Data>
				<code>
					SELECT COUNT(CustomerID), Country <br />
					FROM Customers <br />
					GROUP BY Country <br />
					HAVING COUNT(CustomerID) > 5 <br />
					ORDER BY COUNT(CustomerID) DESC; <br />
				</code>
			</Data>
		</Item>
	</Section>
</Sections>
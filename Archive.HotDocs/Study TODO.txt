
	- Design Patterns
	- What is the problem that each design pattern solved?
	- Is Factory pattern implements the Dependency Inversion principle?
	- What is the difference between Factory and Unit of Work patterns?
	- SQL basics & advanced	
	- SQL ## before table name?
	- What is the most proper location for declaring valiables in method?
	- How is the nested try catch blocks works, which one that will fire, child or parent?
	- Prototype deep copy pattern to fix the sqlConnection issue with multithreads
	- How to make the pull request small, even the task needs a lot of changes?
	- SQL select row_number over partition by?
	- ADO code
	- Entity Framework
	- .Net Core tutorials
	- Structured Programing (Practice)
	- Windows services
	- What is WCF apps used for?
	- UML (Practice)
	- Domain Driven Design (Practice)
	- DataDD, TDD, and DomainDD
	- Microservices (Practice)
	- How to calculate the Space Complexity
	- Reference Type and value type
	- When exactly we should use struct rather than class
	- Where to save the Login Token
	- How c# loops are working, what is the best from performance perspective
	- c# implicit convert and explicit convert
	- Well understand the cross apply and outer apply and using cases
	- Row lock and table lock
	- Temp stored procedure
	- Select rownumber
	- How select query executed with lock and without
	- Algorithms (approachs not particular ones, ex, Brute Force, Devide and Concor, etc...)
	- Watch some GitHub tutorials (Actual cases, when to use rebase, stash, etcâ€¦)
	- Functional Programming (Mohamed Hammad)	
	- Dynamic Programming (Practice)
	- onshore and offshore teams?
	- Understand the DWH (Facts & Dimensions)
	- Understand LogStash, Kibana and ElasticSearch 
	- DB diagram types?
	- SQL Execution plan?	
	- DFS (Practice)
	- SSRS (Practice)
	- SSIS (Practice)
	- MS Unit Test (Practice)
	- LinkedIn English assessment
	- LinkedIn Skills assessments	
	- How to define the ticket complexity
	- Consume API from SQL Server
	- How to do data warehousing with Hadoop
	- Difference between task schedule and windows service
	- Configure CI\CD with GitHub and Deploy to a Github pages (Practice)
	- How the grooming and estimation should be done in Agile scrum
	- Code analysis tools
	- Understand the SSH connectivity (Practice)
	- Difference between RabbitMQ and HangFire
	- How to move messages from one queue to another through RabbitMQ dashboard
	- If more than one rabbitmq server, how acknowledgement reach the correct one
	- Message doesn't delete RabbitMQ dashboard after acknowledge	
	- Business Intelligence (SSIS, SSRS, LookerBI)
	- GCP Review
	- Hacker Rank Problem Solving 
	- Practice on Technical assessments
	
	- Understand MileStone and Polling Event (Practice)
	- $$ in Review.docx
	- Net tutorials
	- ASP.NET Web Forms,
	- WCF Services tutorials.	
	- Web Services
	- SSO (Practice)

>>>>>>>>>Refernces to big companies>>>>>>>>
	1. Data structures
	- Array
	- List (Linked lists, Doubly linked list)
	- Stack
	- Queue
	- Binary tree (and balanced and complete trees)
	- Binary Search tree
	- Graphs (Directed and undirected)
	- Maps and Sets
	- Heaps (Min and Max heaps)
	- Union-find
	- Tries

	2. Algorithms
	- Sorting (Quick, merge, bucket)
	- Binary search (Very common)
	- Tree traversal (preorder, in order, post order)
	- BFS and DFS (Very common)
	- Recursion
	- Divide and conquer
	- Greedy
	- Finding all permutations and combinations
	- Dynamic programming

	Others:
	- Bit manipulation
	- String manipulation
	- Basic math (Euclidean distance, long division, integer division and modulus, means and median, prime numbers, Fibonacci series, sum of sequence of numbers)

	Time complexity (Very important)

	Tricky parts:
	- off-by-one errors
	- infinite loops
	- using stringbuilder to build strings
	- Date representation and manipulation
	- integer vs. Double precision
	- overflow
	- divide by zero
	- edge case checking
	- out of range errors
	- too many if/else statements
	- too many nested loops
	- repeated code
	- null pointer exception

	Resources:
	1. Cracking the code interview
	2. Introduction to algorithms
	3. Leetcode
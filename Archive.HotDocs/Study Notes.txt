- Big O is simply used to describe the performance of an algorithm, which describe the Time & Space complexity.
- Big O: is how much the runtime of this code increases as the size of the input increases
	- Constant O(1): the time doesnt increase by incresing input size.
	- Linear O(n): the time consumed increase as much as the input increase.
	- Quadratic O(n^2):
- How to calculate the Big O: (ex: cn + dn^2 + e)
	- choose the fastest growing term > dn^2
	- Remove the coeffecient > n^2 > Quadratic
	- so in general, you can check every line of code, how this line can be affected according to the input size.
- We have to understand Data Structures well because the data structure object you decide to use will affect your code performance
- Code performance is always to Save Time and Save Space, so you need to decide which factor is more important so if you are developing a mobile app then saving space is much important and so on.
- Data Structures:
	- Array is a collection of items that should be with a fixed length, and we can't add more numbers to exceed the length BECAUSE, in memory we book a specific number of bytes to insert array values sequentialy so that we may have other variables book the next slots of memory so we can't insert new values beside the old values in memory, because to insert array values we need a bunch of consective bytes.
	and what about the List (the dynamic array) its working like everytime you add a new value it defines a new array with the length of old + new values and so on
	- Class is a blue print that you create objects from, so that you define props in class and assign these props values while instantiating it (creating an object), and also you need to make this assignment in class constructor for the mandatory props so that you will defintly pass it when you create object.